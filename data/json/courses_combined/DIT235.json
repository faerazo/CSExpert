{
  "metadata": {
    "source_document": "DIT235.pdf",
    "course_code": "DIT235",
    "course_title": "Types for Programs and Proofs",
    "swedish_title": "Typer för program och bevis",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "A1N, Second cycle, has only first-cycle\ncourse/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2021-11-15",
    "valid_from_date": "2022-08-29",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ],
    "iteration": "Autumn 2025",
    "study_pace": "50%",
    "time": "Day",
    "location": "Göteborg",
    "study_form": "Campus",
    "duration": "1 Sep 2025 - 2 Nov 2025",
    "application_period": "17 Mar 2025 - 15 Apr 2025",
    "application_code": "GU-86034"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2021-11-15 to be valid from 2022-08-29, autumn semester of 2022.",
    "Position in the educational system": "The course is offered within several programmes. It is also a single subject course at the\nUniversity of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS) and 2) Computer Science, Bachelor's Programme (N1COS)\nMain field of studies\nComputer Science\nSpecialization\nA1N, Second cycle, has only first-cycle\ncourse/s as entry requirements",
    "Entry requirements": "To be eligible to the course, the student should have successfully completed 120 credits\nof studies in computer science or mathematics, or equivalent. Specifically, a successfully\ncompleted 7.5 credit course in discrete mathematics (e.g., DIT980 Discrete Mathematics\nfor Computer Scientists, or equivalent) and a successfully completed 7,5 credit course in\nfunctional programming (e.g. DIT143 Functional Programming, or equivalent is\nrequired.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• describe several kinds of type systems, their underlying design principles, and their\nsemantic foundation\n• read and present a research topic in the area\nCompetence and skills\n• program in a dependently typed functional programming language\n• prove theorems in a dependently typed programming language using the\npropositions-as-types principle\n• use deduction formalisms to present type systems and operational semantics of\nprogramming languages\nJudgement and approach\n• critically analyse type systems and prove properties about them",
    "Course content": "The development of powerful type systems is an important aspect of modern\nprogramming language design. This course provides an introduction to this area. In\nparticular it introduces the notion of dependent type, a type which can depend on (is\nindexed by) values of another type, for example, the type of vectors indexed by its\nlength. Dependent types are versatile. Through the Curry-Howard identification of\nproposition and types virtually any property of a program can be expressed using\ndependent types. The aim of the course is to give a solid and broad foundation in type\nsystems for programming languages, and also give examples of type-based technologies\nin computer science.\n• introduction to lambda calculus and simple type theory\n• introduction to operational semantics and type systems\n• dependent type theory\n• the Curry-Howard identification of propositions as types\n• programming in Agda, a proof assistant\n• presentation of advanced topics in type systems",
    "Sub-courses": "1. Take home examination (Hemtentamen), 7.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "Form of teaching": "Lectures, exercise sessions, supervision.",
    "Assessment": "The course is examined by an oral presentation normally performed in pairs, and by an\nindividual take home examination. In addition, to receive a higher grade than G/Pass\nthe student has to pass an individual oral examination.\nThe take home exam includes both theoretical problems and programming assignments.\nFor the oral presentation, the student can select either a research paper or a chapter in\nthe course book involving applications of type systems not covered in the lectures.\nIf the take-home exam is handed in too late it is failed. An oral examination is used as\nreexamination.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nThe grade on the course is the same as the grade on the sub-course \"Take home\nexamination\".",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "Knowledge of Functional Programming is recommended, e.g., from the course DIT143\nFunctional Programming, or equivalent.\nThe course is a joint Chalmers-GU course.\nCourse literature will be announced no later than 8 weeks prior to the start of the\ncourse.\nThe course replaces the course DIT233, 7.5 credits. The course cannot be included in a\ndegree which contains DIT233. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT233 is included.\n\nLast modified 20 February 2025",
    "Selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits",
    "Tuition": "Full education cost: 17 753 SEK\n\nFirst payment: 17 753 SEK\n\nNo fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.\n\n[More information about tuition fees](https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees)"
  }
}