{
  "metadata": {
    "source_document": "DIT270.pdf",
    "course_code": "DIT270",
    "course_title": "Software Engineering using Formal Methods",
    "swedish_title": "Software Engineering using Formal Methods",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science-Secure and Depend\nCompr Systems",
    "specialization": "A1N, Second cycle, has only first-cycle\ncourse/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2009-09-18",
    "valid_from_date": "2015-08-31",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Software Engineering Master's Programme (N2SOM)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "No translation available (NDATM)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2009-09-18 and was\nlast revised on 2014-11-13 by Department of Computer Science and Engineering to be\nvalid from 2015-08-31, autumn semester of 2015.",
    "Position in the educational system": "The course is a part of the Computer Science Master's programme and a single subject\ncourse at the University of Gothenburg.\nThe level for the course in relation to degree requirements is Master's degree, code AlN.\nThe course has course/courses at first cycle level as entry requirements.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Software Engineering Master's Programme (N2SOM), 3)\nComputer Science, Bachelor's Programme (N1COS) and 4) No translation available\n(NDATM)",
    "Entry requirements": "The requirement for the course is to have successfully completed two years studies\nwithin the subject Computer Science or equivalent. Skills in object oriented\nprogramming (lika Java) are a prerequisite.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "The aim of this course is to introduce students to the two most important styles of\nformal methods for reasoning about software: model checking and deductive\nverification. Each style will be introduced using a particular concrete tool for analyzing.\nAfter completing the course the student is expected to be able to:\nKnowledge and understanding:\n• judge the potential and limitations of using logic based verification methods for\nassessing and improving software correctness,\n• judge what can and what cannot be expressed by certain specification/modeling\nformalisms,\n• judge what can and cannot be analyzed with certain logics and proof methods,\n• appreciate the difference between syntax, semantics, and proof methods in\nconnection with logic-based systems for verification.\nSkills and abilities:\n• express safety properties of (concurrent) programs in a formal way,\n• describe the basics of verifying safety properties via model checking,\n• use tools which integrate and automate the model checking of safety properties,\n• write formal specifications of object-oriented system units, using the concepts of\nmethod contracts and class invariants,\n• describe how the connection between programs and formal specifications can be\nrepresented in a program logic,\n• verify functional properties of simple Java programs with a verification tool.\nJudgement and approach:\n• acknowledge the socio-economical costs caused by faulty software,\n• judge and communicate the significance of correctness for software development,\n• approach the issue of correctly functioning software by means of abstraction,\nmodeling, and rigorous reasoning.",
    "Course content": "Formal Methods is a generic term for system design, analysis, and implementation\nmethods that are described and used with mathematical rigor. The purpose is to\nconstruct, with high confidence, systems that behave according to their specification.\nThe course introduces practically and theoretically the two most important styles of\nformal methods for reasoning about software: automatic and interactive methods. Each\nstyle is introduced using a particular concrete tool for developing software in that style.\nThe automatic style inherently places restrictions on the kind of software that can be\ndeveloped. We use the concurrent modeling language Promela and the Spin model\nchecker. The main automatic method we concentrate on is the verification of safety\nproperties expressed in Temporal Logic. The lectures cover the following topics:\n• Propositional and Temporal Logic\n• Promela\n• Verifying Assertions\n• Synchronization\n• Verifying Safety and Liveness Properties in Temporal Logic\nOn the interactive side, the KeY is an integrated tool for object-oriented design and\nformal verification. It is developed at Chalmers and at Universities of Koblenz and\nKarlsruhe. The target language of KeY is a subset of Java. KeY supports UML class\ndiagrams, formal specification in the Java Modeling Language (JML), translation from\nJML into logic, and an interactive theorem prover that is used to formally verify\nstatements about specifications and programs. The lectures cover the following topics:\n• First-Order Logic\n• Java Modeling Language\n• Dynamic Logic for Verification of Java Programs\n• Writing Proof Obligations\n• Verification of Programs with Loops",
    "Sub-courses": "1. Examination (Tentamen), 5 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Laboratory (Laboration), 2.5 higher education credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "Language of instruction: English",
    "Assessment": "There are two labs that can be done in groups of two.\nAt the end of the course a written exam takes place, individually performed.\nA student who has failed a same examination twice has the right to request of the\ndepartment a change of examiner. The request is to be in writing and submitted as soon\nas possible. The department is to grant such a request without undue delay.\nIn cases where a course has been discontinued or major changes have been made a\nstudent should be guaranteed at least three examination occasions (including the\nordinary examination occasion) during a time of at least one year from the last time the\ncourse was given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nTo pass the whole course it is necessary to pass both the final exam and labs. The final\ngrade for the course is determined by the result in the exam. To be awarded Pass with\ndistinction (VG), the student must receive a VG on the exam.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "It is recommended, however not required, to read one of the following courses\nbeforehand: Testing, Debugging and Verification (DIT082 or similar), Logic in\nComputer Science (DIT201 or similar) and Concurrent Programming (DIT390 or\nsimilar)."
  }
}