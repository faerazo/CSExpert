{
  "metadata": {
    "source_document": "DIT660.pdf",
    "course_code": "DIT660",
    "course_title": "Computer Networks",
    "swedish_title": "Datornätverk",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "A1F, Second cycle, has second-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2017-02-13",
    "valid_from_date": "2017-08-28",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2017-02-13 to be valid from 2017-08-28, autumn semester of 2017.",
    "Position in the educational system": "The course is part of the Computer Science Master's Programme. It is also a single\nsubject course at the University of Gothenburg.\nThe course can be part of the following programme: 1) Computer Science, Master's\nProgramme (N2COS)",
    "Entry requirements": "The requirement for the course is to have successfully completed courses corresponding\nto 120 hec within the subject Computer Science or equivalent, including at least:\n• 7.5 hec in discrete mathematics (DIT980 or equivalent),\n• 7.5 hec in finite automata theory and formal language (DIT321 or equivalent),\n• 7.5 hec in imperative or object oriented programming (DIT012, DIT952, or\nequivalent),\n• 7.5 hec in data structures (DIT961 or equivalent),\n• 7.5 hec in algorithms (DIT602 or equivalent), and\n• 7.5 hec in computer communication (DIT423 or equivalent) or operating systems\n(DIT401 or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• demonstrate a broad knowledge of Internet technology and domain name systems,\n• demonstrate a considerable degree of technical knowhow on the Internet new\ngeneration IPv6,\n• describe and analyse architecture, core protocols, global routing, services as well as\ntheir limitations of networks such as the Internet,\n• discuss and analyse contemporary networking problems, such as TCP connections,\ncontention, performance and flow control,\nSkills and abilities\n•\ndefine systematically and analyse a computer network in terms of communication\ngraphs and as a distributed system. This specifically refers to problems such as token\ncirculation, spanning tree construction, leader election, initialization of data link\nalgorithms, topology update, clock synchronization, and more,\n• use a number of proof techniques, such as re-computation of floating output, fair\ncomposition, variant functions, and convergence stairs, as well as demonstrate the\ncorrectness of a number of fault-containment or super-stabilization algorithms,\n• develop small scale network applications using fundamental networking techniques,\n• design and develop your own network-oriented program and then test and\ndemonstrate it in the lab,\n• demonstrate and write lab reports on protocol correctness,\n• explain and demonstrate the correctness of the studied (self-stabilizing) protocols as\nwell as clearly describe the network algorithms that you design yourself,\n• demonstrate software developments for advanced fault-tolerant client-server and\npeer-to-peer architectures,\n• design distributed (self-stabilizing) algorithms for computer networks and show why\nthey work,\nJudgement and approach\n• describe, design and analyse existing and new algorithms for network protocols with\na very strong emphasis on self-stabilizing algorithms for computer networks,\n• critically analyse the effect of failures, such as transient faults, message omission,\nand topology changes, on the system and how can such failures propagate and effect\ncomputer networks.",
    "Course content": "This course focuses on the algorithmic design of network protocols and covers a range\nof sub-specialties including: computer communication network concepts, programming\nusing BSD socket API, and distributed fault-tolerance algorithms with a very strong\nemphasis on self-stabilization. The aim of this course is to learn to design and analyse\nalgorithms for network protocols and to gain knowledge in existing communication\nnetworks, including supporting systems and protocols, fundamental tasks and methods\nin data communication networks. Mastery of computer networks involves both theory\nand practice in the design, implementation and use of network protocols and services.\nThis course offers learning experiences that involve hands-on experimentation and\nanalysis as they reinforce student understanding of concepts and their application to\nreal-world problems. Several laboratory experiments are given and involve API\nprogramming for fault-tolerance network systems, and Internet interconnections and\nservices from a practical perspective, and design and analysis of protocols with a strong\nemphasis on self-stabilizing algorithms.\nThis course provides the students with the analytical background needed for\nunderstanding fundamental issues in the design of distributed fault tolerance algorithms\nfor computer network protocols. The course has a very strong emphasis on transient\nfaults and how self-stabilizing algorithms can allow automatic recovery after their\noccurrence.",
    "Sub-courses": "1. Written examination (Skriftlig tentamen), 6 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Assignments (Inlämningsuppgifter), 1.5 higher education credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "Lectures, exercises, home assignments, and laboratory assignments.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written examination carried out in an\nexamination hall at the end of the course, and written assignments which are normally\ncarried out in pairs.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nIn order to be awarded Pass (G) for a full course, the student must Pass both the written\nexamination at the end of the course and get approval for all assignments (pre-/post-\nlecture questions, algorithm assignments, programming labs, and networking labs). To\nbe awarded Pass with Distinction (VG) for a full course, the student must get the grade\nPass with Distinction on the written examination and the grade Pass on the assignments.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "Course literature to be announced the latest 8 weeks prior to the start of the course.\nThis is a work intensive course with lots of homework, labs and reading to do before\nand after each lectures.\nThe course is a joint course together with Chalmers.\nThe course replaces the course DIT663 Computer Networks, 7.5 hec. The course cannot\nbe included in a degree which contains DIT663. Neither can the course be included in a\ndegree which is based on another degree in which the course DIT663 is included."
  }
}