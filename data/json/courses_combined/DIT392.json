{
  "metadata": {
    "source_document": "DIT392.pdf",
    "course_code": "DIT392",
    "course_title": "Principles of Concurrent Programming",
    "swedish_title": "Principer för parallell programmering",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": 7.5,
    "cycle": "First Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "G1F",
    "language_of_instruction": "English",
    "confirmation_date": "2021-11-15",
    "valid_from_date": "2022-08-29",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Mathematical Sciences, Master's Programme (N2MAT)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Bachelor's Programme in Mathematics (N1MAT)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "Software Engineering Master's Programme (N2SOM)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ],
    "iteration": "Spring 2025",
    "study_pace": "50%",
    "time": "Day",
    "location": "Göteborg",
    "study_form": "Campus",
    "duration": "20 Jan 2025 - 23 Mar 2025",
    "application_period": "16 Sep 2024 - 15 Oct 2024",
    "application_code": "GU-86016"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2021-11-15 to be valid from 2022-08-29, autumn semester of 2022.",
    "Position in the educational system": "The course is a compulsory course in the Computer Science, Bachelor's\nProgramme. The course is also a single subject course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Mathematical Sciences, Master's Programme (N2MAT), 3)\nApplied Data Science Master's Programme (N2ADS), 4) Bachelor's Programme in\nMathematics (N1MAT), 5) Computer Science, Bachelor's Programme (N1COS), 6)\nSoftware Engineering Master's Programme (N2SOM) and 7) Software Engineering and\nManagement Master's Programme (N2SOF)",
    "Entry requirements": "The student should have successfully completed at least\n• 7.5 hec in imperative/object-oriented programming such as DIT012, DIT948 or\nequivalent,\n• an additional course in programming or data structures.\nMoreover, the student must also have knowledge in propositional logic, which is\nacquired by successfully completing courses such as DIT980, DIT725, the part on\nintroductory algebra from MMGD200, or equivalent.",
    "Learning outcomes": "After successful completion of the course, the student should be able to:\nKnowledge and understanding\n• demonstrate knowledge of the issues and problems that arise in writing correct\nconcurrent programs;\n• identify the problems of synchronization typical of concurrent programs, such as\nrace conditions and mutual exclusion;\nCompetence and skills\n• apply common patterns, such as lockings, semaphores, and message-passing\nsynchronization for solving concurrent program problems;\n• apply practical knowledge of the programming constructs and techniques offered by\nmodern concurrent programming languages.;\n• implement solutions using common patterns in modern programming languages;\nJudgement and approach\n• evaluate the correctness, clarity, and efficiency of different solutions to concurrent\nprogramming problems;\n• judge whether a program, a library, or a data structure is safe for usage in a\nconcurrent setting;\n• pick the right language constructs for solving synchronization and communication\nproblems between computational units.",
    "Course content": "Concurrent and parallel programming has become ubiquitous in modern software and\nsystems, where concurrency is leveraged to exploit physical parallelism and speed up\ncomputations, to provide interactive multi-tasking, and to handle interaction with\nasynchronous external events. This course aims to provide an introduction to the\nprinciples underlying concurrent systems, as well as to practical programming solutions\nfor modeling and exploiting concurrency in programs. Domains where such principles\nand practices are relevant include operating systems, distributed systems, real-time\nsystems, and multicore architectures.\nThe concepts covered in the course include:\n• physical vs logical parallelism\n• concurrency problems (race conditions, interference, deadlock, fairness, livelock).\n• mutual exclusion\n• shared memory synchronization (using semaphores or fine grained locking)\n• message-passing synchronization (using message queues)\nThe course illustrates practical solutions to concurrent programming using both\nimperative and functional programming languages. Thus, the course will also include\nshort introductory tutorials on functional programming in general and on the functional\nprogramming language used in the course, providing sufficient background to\nunderstand and use the concurrent programming abstractions demonstrated by means\nof functional languages.",
    "Sub-courses": "1. Written exam (Tentamen), 4.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\n2. Laboratory work (Laboration), 3 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "Lectures, exercise classes, and laboratory sessions.",
    "Assessment": "The course is examined by an individual written exam (4.5 hec), carried-out in an\nexamination hall, and laboratory assignments (3.0 hec) which are normally carried out\nin pairs of students. The complete course grade is then determined by the score of both\nthe laboratory part and the written exam.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nTo pass the course, all mandatory components must be passed. To earn a higher grade\nthan Pass, a higher weighted average from the grades of the components is required.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "Knowledge in functional programming (corresponding for example to DIT440 or\nDIT142) is beneficial but not required.\nThe course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT391, 7.5 credits. The course cannot be included in a\ndegree which contains DIT391. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT391is included.\n\nLast modified 20 February 2025",
    "Selection": "Selection is based upon average grade from upper secondary school (34 %), the number of credits from previous university studies, maximum 165 credits (33 %) and Högskoleprovet - Swedish Scholastic Aptitude Test (33 %).",
    "Tuition": "Full education cost: 19 253 SEK\n\nFirst payment: 19 253 SEK\n\nNo fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.\n\n[More information about tuition fees](https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees)"
  }
}