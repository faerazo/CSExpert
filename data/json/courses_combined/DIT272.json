{
  "metadata": {
    "source_document": "DIT272.pdf",
    "course_code": "DIT272",
    "course_title": "Formal Methods in Software Development",
    "swedish_title": "Formella metoder i mjukvaruutveckling",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "A1F, Second cycle, has second-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2020-12-18",
    "valid_from_date": "2024-09-02",
    "programmes": [
      "1) Computer Science, Master's Programme (N2COS)",
      "2) Computer Science, Bachelor's Programme (N1COS)"
    ],
    "iteration": "Autumn 2025",
    "study_pace": "50%",
    "time": "Day",
    "location": "Göteborg",
    "study_form": "Campus",
    "duration": "1 Sep 2025 - 2 Nov 2025",
    "application_period": "17 Mar 2025 - 15 Apr 2025",
    "application_code": "GU-86029"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2020-12-18 and was last revised on 2023-11-13 to be valid from 2024-09-\n02, autumn semester of 2024.",
    "Position in the educational system": "The course is part of the Computer Science Master's programme and a single subject\ncourse at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS) and 2) Computer Science, Bachelor's Programme (N1COS)",
    "Entry requirements": "The requirement for the course is to have successfully completed courses corresponding\nto 120 hec within the subject Computer Science or equivalent, specifically DIT203 Logic\nin Computer Science, 7.5 hec, and a 7.5 hec course in object-oriented programming (or\nequivalent) are required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• explain the potential and limitations of using logic based verification methods for\nassessing and improving software correctness,\n• identify what can and what cannot be expressed by certain specification/modeling\nformalisms,\n• identify what can and cannot be analyzed with certain logics and proof methods,\nCompetence and skills\n•\nexpress safety and liveness properties of (concurrent) programs in a formal way,\n• describe the basics of verifying safety and liveness properties via model checking,\n• successfully employ tools which prove or disprove temporal properties,\n• write formal specifications of object-oriented system units, using the concepts of\nmethod contracts and class invariants,\n• describe how the connection between programs and formal specifications can be\nrepresented in a program logic,\n• verify functional properties of simple programs in a verification tool\nJudgement and approach\n• judge and communicate the significance of correctness for software development,\n• employ abstraction, modelling, and rigorous reasoning when approaching the\ndevelopment of correctly functioning software.",
    "Course content": "The aim of this course is to teach knowledge and skills in, and judgement about, two\nimportant styles of formal methods for reasoning about software: model checking and\ndeductive verification. Each style will be introduced in three ways: conceptual,\ntheoretical, and practical, using a particular tool. The course builds on skills in first-\norder logic and temporal logic, and shows how these formalisms can be applied, and\nextended, for the verification of software.\nOn the model checking side, we cover the following topics:\n• a specification language for concurrent processes,\n• verifying assertions,\n• synchronization,\n• verifying safety and liveness properties in temporal logic.\nOn the deductive verification side, we cover the following topics:\n• program logics, including Hoare logic and separation logic,\n• reasoning about loops using invariants,\n• verification of small programs using tools for program verification\n• techniques used when tackling verification of larger or more complex programs",
    "Sub-courses": "1. Written hall exam (Skriftlig salstentamen), 5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\n2. Laboratory (Laboration), 2.5 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "There are about two lectures each week, and one exercise class per week. The students\nperform practical case studies using the tools in the laboratory assignments.\nLanguage of instruction: English",
    "Assessment": "The course is examined by a written hall exam and compulsory laboratory assignments\nhanded in during the course. The practical laboratory assignments are normally carried\nout in pairs.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nTo pass the whole course, it is necessary to pass both the written hall examination and\nthe labs. In case of pass, the grade is determined by the result in the written hall\nexamination.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature to be announced 8 weeks prior to the start of the course.\nThe course replaces the DIT271 Software Engineering using Formal Methods course.\nThe course cannot be included in a degree which contains DIT271. Neither can the\ncourse be included in a masterdegree which is based on a bachelordegree in which the\ncourse DIT271 is included.\n\nLast modified 20 February 2025",
    "Selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits",
    "Tuition": "Tuition\nFull education cost: 17 753 SEK\nFirst payment: 17 753 SEK\nNo fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.\n[More information about tuition fees](https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees)\nApplication closed, late application opens 15 July 2025."
  }
}