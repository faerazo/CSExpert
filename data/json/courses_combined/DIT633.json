{
  "metadata": {
    "source_document": "DIT633.pdf",
    "course_code": "DIT633",
    "course_title": "Development of Embedded and Real-Time Systems",
    "swedish_title": "Utveckling av inbyggda- och realtidssystem",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "G1F, First cycle, has less than 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2021-10-26",
    "valid_from_date": "2023-01-16",
    "programmes": [
      "Software Engineering and Management Bachelor's Programme (N1SOF)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and Engineering on 2021-10-26 to be valid from 2023-01-16, spring semester of 2023.",
    "Position in the educational system": "The course is compulsory within the Software Engineering and Management Bachelor's Programme. It is also a single subject course at the University of Gothenburg.\nThe course can be part of the following programme: 1) Software Engineering and Management Bachelor's Programme (N1SOF)",
    "Entry requirements": "To be eligible to the course, the student should have successfully completed 30 credits of courses within Software Engineering, Computer Science, or equivalent, including a 7.5 credits course in programming (e.g., DIT043 Object-Oriented Programming, DIT012 Imperative Programming with Basic Object-Oriantation, or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• exemplify characteristics of embedded systems and of real time systems\n• explain the basic theory of exceptions, interrupts, and timers\n• illustrate an overall view of a compilation process\n• explain cross compilation\n• clarify the differences between a desktop application and an embedded application\n• define the concepts of tasks, scheduling, semaphores, message queues,\nsynchronization and communication\n• exemplify methods of abstracting the underlying hardware\nCompetence and skills\n• implement an embedded application using a system programming language, such as C for some given hardware, using a cross compiler\n• carry out a test strategy for an embedded application\n• manage rudimentary real time applications\n• transfer a compiled binary from the compilation environment to the target embedded system\nJudgement and approach\n• analyse and participate in discussions of an embedded real-time system's basic modularity\n• estimate the need for and suggest how to perform software tests for an embedded real-time system\n• judge the impact of the solution (embedded system) on sustainability attributes, such as energy consumption, electronic waste, economical sustainability\n• reason about the use of simulated environment vs. real hardware with respect to the balance between sustainability (in terms of resource consumption, development process) and possibilities to validate the system\nThe course is sustainability-related, which means that at least one of the learning outcomes clearly shows that the course content meets at least one of the University of Gothenburg's confirmed sustainability criteria.",
    "Course content": "Embedded and real-time software is often closely interacting with hardware. Typically, this software is written in a language like C on either a real-time operating system or a stripped Unix/Linux version. The course contains an introduction to embedded and real-time systems, programming for an embedded environment and tools used to develop embedded systems, use of IDEs as well as command line programs (compilers, linkers etc.).\nThe course also contains an introduction to the principal of program execution and the interrupt manage process, general operating systems and real-time operating systems, concepts, mainly, used in the real-time and embedded systems.\nThe course introduces and discusses the concept of sustainability in terms of minimizing electronic waste, reusing components and using simulation as a means to reduce the electronics footprint.",
    "Sub-courses": "1. Hall examination (Salstentamen), 4.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\n2. Assignments (Inlämningsuppgifter), 3 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "The teaching consists of lectures, exercises and examination parts, as well as supervision in connection to the exercises.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written exam carried out in an examination hall and written assignments normally carried out in groups. The assignments part is examined on the basis of solutions to compulsory problems handed in during the course and on the basis of individual contribution to the group work. Students are required to complete written self- and peer-assessment forms during the course which will be part of the assessment of the student's individual contribution to the group work.\nThe student may also earn bonus points to the written exam through the assignments part in the course with up to 1/4 of the points needed for the grade Passed in the written exam. The bonus points are only valid for the three examinations during the course year.\nRetake examinations of the assignments part consist of additional individual assignments.\nIf a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the student shall normally be guaranteed at least three examination occasions (including the ordinary examination) during a period of at least one year from the last time the course was given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U).\nTo pass the course, students must receive a passing grade in both modules. The grade for the entire course will be determined by the written exam.",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student representatives. Further, an anonymous questionnaire is used to ensure written information. The outcome of the evaluations serves to improve the course by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "Course literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT632, 7.5 credits. The course cannot be included in a degree which contains DIT632. Neither can the course be included in a degree which is based on another degree in which the course DIT632 is included."
  }
}