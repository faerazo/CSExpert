{
  "metadata": {
    "source_document": "DIT162.pdf",
    "course_code": "DIT162",
    "course_title": "Real-Time Systems",
    "swedish_title": "Realtidssystem",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Technology 50% and Science 50%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "A1F, Second cycle, has second-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2017-12-19",
    "valid_from_date": "2018-08-19",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Game Design & Technology Master's Programme (N2GDT)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ],
    "iteration": "Spring 2025",
    "study_pace": "50%",
    "time": "Day",
    "location": "Göteborg",
    "study_form": "Campus",
    "duration": "20 Jan 2025 - 23 Mar 2025",
    "application_period": "16 Sep 2024 - 15 Oct 2024",
    "application_code": "GU-86031",
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2017-12-19 to be valid from 2018-08-19, autumn semester of 2018.",
    "Position in the educational system": "The course is offered within several programmes. It is also a single subject course at the\nUniversity of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Applied Data Science Master's Programme (N2ADS), 3)\nGame Design & Technology Master's Programme (N2GDT), 4) Computer Science,\nBachelor's Programme (N1COS) and 5) Software Engineering and Management\nMaster's Programme (N2SOF)",
    "Entry requirements": "To be eligible to the course, the student should have completed the following courses, or\nequivalent:\n• DIT391 Principles of Concurrent Programming, 7.5 credits\n• DIT401 Operating Systems, 7.5 credits\n• DIT151 Machine Oriented Programming, 7.5 credits",
    "Learning outcomes": "After completion of the course the student should be able to:\nKnowledge and understanding\n• formulate requirements for embedded systems with strict constraints on\ncomputational delay and periodicity\n• categorize and describe the different layers in a system architecture for embedded\nreal-time systems\n• describe the principles and mechanisms used for designing run-time systems and\ncommunication networks for real-time applications\n• describe how the general principles in real-time programming are implemented in\ndifferent high-level programming languages\nCompetence and skills\n•\n• construct concurrently-executing tasks (software units) for real-time applications\nthat interface to hardware devices (sensors/actuators)\napply the basic analysis methods used for verifying the temporal correctness of a set\nof executing tasks\nJudgement and approach\n• reflect and argue in writing on ethical aspects regarding the choice of system\nimplementation",
    "Course content": "This course is intended to give basic knowledge about methods for the design and\nanalysis of real-time systems. Examples of real-time systems are control systems for cars,\naircraft and space vehicles as well as computer games and multimedia applications.\nAn embedded system is a computer system designed to perform one or a few dedicated\nfunctions. It is embedded in the sense that it is part of a complete device, often including\nelectrical hardware and mechanical parts. For reasons of safety and usability, some\nembedded systems have strict constraints on non-functional behavior such as\ncomputational delay and periodicity. Such systems are referred to as real-time systems.\nExamples of real-time systems are control systems for cars, aircraft and space vehicles as\nwell as computer games and multimedia applications. This course is intended to give\nbasic knowledge about methods for the design and analysis of real-time systems.\nDue to the extremely high costs associated with late discovery of problems in embedded\nsystems, it is important to follow a good design methodology during the development of\nthe software and hardware. One means for that is to use a system architecture that offers\ngood component abstractions and facilitates simple interfacing of components. The\nsystem architecture philosophy dictates that the software of an embedded system is\norganized into multiple concurrently-executing tasks, where each task (or group of\ntasks) implements a specific functionality in the system. This approach allows for an\nintuitive way of decomposing a complex system into smaller software units that are\nsimple to comprehend, implement and maintain.\nThe software environment used in the course is based on the C programming language,\nenhanced with a software library that provides support for programming of concurrent\ntasks with timing (delay and periodicity) constraints. To that end, a main objective of\nthe course is to demonstrate how the enhanced C programming language is used for\nimplementing communication/synchronization between tasks, resource management\nand mutual exclusion. Since other programming languages uses monitors or semaphores\nto implement these functions, the course also contains a presentation of such techniques.\nIn addition, the course demonstrates how to use low-level programming in C to\nimplement interrupt-driven interaction with hardware devices. To demonstrate the\ngeneral principles in real-time programming, the course also gives examples of how these\ntechniques are implemented in other programming languages, such as Ada and Java.\nIn order to execute a program containing concurrent tasks there is a run-time system\n(real-time kernel) that distributes the available capacity of the microprocessor(s) among\nthe tasks. The course shows how a simple run-time system is organized. The run-time\nsystem determines the order of execution for the tasks by means of a scheduling\nalgorithm. To that end, the course presents techniques based on cyclic time-table based\nscheduling as well as scheduling techniques using static or dynamic task priorities. In\naddition, protocols for the management of shared hardware and software resources are\npresented. Since many contemporary real-time applications are distributed over multiple\ncomputer nodes, the course also presents topologies and medium access mechanisms for\nsome commonly-used communication networks.\nIn real-time systems, where tasks have strict timing constraints, it is necessary to make a\npre-run-time analysis of the system schedulability. The course presents three different\nanalysis methods for systems that schedule tasks using static or dynamic priorities:\nutilization-based analysis, response-time analysis, and processor-demand analysis. In\nconjunction with this, the course also gives an account on how to derive the maximum\nresource requirement (worst-case execution time) of a task.",
    "Sub-courses": "1. Written examination (Skriftlig tentamen ), 4.5 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Laboratory work (Laboration), 3 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)",
    "Form of teaching": "The course is organized as a series of lectures and a set of exercise sessions where the\nprogramming techniques and theories presented at the lectures are put into practice. The\ncourse material is examined by means of a final written exam. In addition, there is a\ncompulsory laboratory assignment in which the students should implement the software\nfor an embedded real-time application running on a hardware system consisting of\nmultiple computer nodes interconnected by a bus network. Apart from the\nprogramming of cooperating concurrent tasks with strict timing constraints, the\nlaboratory assignment also encompasses low-level programming of hardware devices\nsuch as timers and network controllers.\nLanguage of instruction: English",
    "Assessment": "The student is evaluated by means of a written exam and a compulsory laboratory\nassignment.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nA Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses.\nA Pass with Distinction (VG) grade for the entire course requires a VG grade for all\nsub-courses.",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT161, 7.5 credits. The course cannot be included in a\ndegree which contains DIT161. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT161 is included.\n\nLast modified: 15 January 2025",
    "Selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits",
    "Tuition": "Full education cost: 19 253 SEK\n\nFirst payment: 19 253 SEK\n\n**No fees** are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.\n\n[More information about tuition fees](https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees)"
  }
}