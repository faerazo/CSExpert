{
  "metadata": {
    "source_document": "DIT976.pdf",
    "course_code": "DIT976",
    "course_title": "Software Language Engineering for Domain-Specific Languages",
    "swedish_title": "Programvaruspråksteknik för domänspecifika språk",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "AIN, Second cycle, has only first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2020-10-27",
    "valid_from_date": "2022-01-17",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2020-10-27 to be valid from 2022-01-17, spring semester of 2022.",
    "Position in the educational system": "The course is a semi-elective course in the Software Engineering and Management\nMaster's Programme. The course is also a single subject course at the University of\nGothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Applied Data Science Master's Programme (N2ADS) and 3)\nSoftware Engineering and Management Master's Programme (N2SOF)",
    "Entry requirements": "To be eligible for this course, the student must have;\n1. a Bachelor degree in Software Engineering, Computer Science or equivalent,\n2. successfully completed a 7.5 hec course in Object oriented Programming (such as\nDIT948 programming, DIT952 Object oriented Programming and Design or\nequivalent)\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completing the course the student should be able to:\nKnowledge and understanding\n• explain the following concepts: models, metamodel, constraints, transformation,\nsemantics, abstract and concrete syntax\n• explain the architecture of contemporary modeling frameworks\n• explain how domain specific modeling languages can be realized within a\ncontemporary modeling framework\n• explain current research trends in domain-specific language (DSL) engineering\nCompetence and skills\n• construct domain specific languages, e.g. specify meta models including syntax and\nsemantics\n• define syntactic constraints using a constraint language\n• implement meta models within a modeling framework\n• construct model editors within a modeling framework\n•\ncreate model validators within a modeling framework\n• specify model transformations, and realize them within a modeling framework\n•\napply the domain specific modeling approach to an authentic case\nJudgement and approach\n•\n• identify emerging technologies for model-driven engineering using relevant\ninformation sources\n• select appropriate domain specific modeling technology for a given tool\npropose effective strategies and concrete technologies for realizing parts of a DSL\nbased on a concrete problem",
    "Course content": "The course consists of a series of lectures and a project. The lectures introduce each\ntheme; the project explores the themes by development of a modeling tool. The tool is\naimed at an authentic situation, and is realized by a contemporary modeling framework.\nThe project consists of weekly iterations, during which the modeling tool is\nincrementally developed. Project work is carried out in teams with support of a group\nsupervisor.\nStudents will be familiarized with contemporary technologies and notations for creation,\nadaptation, and transformation of modeling languages.",
    "Sub-courses": "1. Written hall examination (Skriftlig salstentamen), 4.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\n2. Project (Projekt), 3 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "The teaching of this course will consist of different forms: lectures, literature studies,\ngroup work, group supervision, and practical assignments.\nLanguage of instruction: English",
    "Assessment": "The examination consists of two parts: a final individual written hall examination\ncarried out in an examination hall (4.5 hec) and a project (3 hec).\nThe project is carried out in groups of normally 4-6 students. The project part is graded\nindividually, taking into account the group work as well as the student's individual\ncontribution to the group work.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance)\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nThe grading scale comprises Fail (U), 3, 4 or 5. In order to pass the course both the\nproject and the written hall examination have to be approved. The final grade in the\ncourse is decided from the grade of the written hall examination.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature will be announced at the latest 8 weeks prior to the start of the course.\nIn the Software Engineering Master's Programme, the course is part of a set of four\ncourses, out of which the student need to take at least two.\nThe course replaces the course DIT975, 7.5 credits. The course cannot be included in a\ndegree which contains DIT975. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT975 is included."
  }
}