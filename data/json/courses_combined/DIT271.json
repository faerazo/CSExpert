{
  "metadata": {
    "source_document": "DIT271.pdf",
    "course_code": "DIT271",
    "course_title": "Formal Methods in Software Development",
    "swedish_title": "Formella metoder i mjukvaruutveckling",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "A1F, Second cycle, has second-cycle\ncourse/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2017-02-10",
    "valid_from_date": "2017-08-28",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2017-02-10 to be valid from 2017-08-28, autumn semester of 2017.",
    "Position in the educational system": "The course is part of the Computer Science Master's programme and a single subject\ncourse at the University of Gothenburg.\n\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS) and 2) Computer Science, Bachelor's Programme (N1COS)\n\nMain field of studies\nComputer Science\n\nSpecialization\nA1F, Second cycle, has second-cycle\ncourse/s as entry requirements",
    "Entry requirements": "The requirement for the course is to have successfully completed courses corresponding\nto 120 hec within the subject Computer Science or equivalent, specifically DIT201 Logic\nin Computer Science, 7.5 hec, and a 7.5 hec course in object-oriented programming (or\nequivalent) are required.\n\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\n\nKnowledge and understanding\n• explain the potential and limitations of using logic based verification methods for\nassessing and improving software correctness,\n• identify what can and what cannot be expressed by certain specification/modeling\nformalisms,\n• identify what can and cannot be analyzed with certain logics and proof methods,\n\nSkills and abilities\n• express safety and liveness properties of (concurrent) programs in a formal way,\n• describe the basics of verifying safety and liveness properties via model checking,\n• successfully employ tools which prove or disprove temporal properties,\n• write formal specifications of object-oriented system units, using the concepts of\nmethod contracts and class invariants,\n• describe how the connection between programs and formal specifications can be\nrepresented in a program logic,\n• verify functional properties of simple Java programs with a verification tool,\n\nJudgement and approach\n• judge and communicate the significance of correctness for software development,\n• employ abstraction, modelling, and rigorous reasoning when approaching the\ndevelopment of correctly functioning software.",
    "Course content": "The aim of this course is to teach knowledge and skills in, and judgement about, two\nimportant styles of formal methods for reasoning about software: model checking and\ndeductive verification. Each style will be introduced in three ways: conceptual,\ntheoretical, and practical, using a particular tool. The course builds on skills in first-\norder logic and temporal logic, and shows how these formalisms can be applied, and\nextended, for the verification of software.\n\nOn the model checking side, we cover the following topics:\n• a specification language for concurrent processes,\n• verifying assertions,\n• synchronization,\n• verifying safety and liveness properties in temporal logic.\nOn the deductive verification side, we cover the following topics:\n• a unit level specification language for Java programs,\n• a logic for verification of Java programs,\n• verification of Java programs, in the sense that the implementation of a unit fulfils\nthe specification.",
    "Sub-courses": "1. Oral Examination (Muntlig Tentamen), 5 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n\n2. Laboratory (Laboration), 2.5 higher education credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "There are about two lectures each week, and one exercise class per week. The students\nperform practical case studies using the tools in the laboratory assignments.\n\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual oral exam (U-VG), and compulsory laboratory\nassignments handed in during the course (U-G). The practical laboratory assignments\nare normally carried out in pairs.\n\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\n\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nIn order to be awarded the grade Pass (G) for the whole course, the student must pass\nboth the sub-courses. In order to be awarded the grade Pass with Distinction (VG), the\nstudent needs to get the grade Pass with Distinction on the sub-course Oral examination\nand pass the sub-course Laboratory.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course replaces the DIT270 Software Engineering using Formal Methods course.\nThe course cannot be included in a degree which contains DIT270. Neither can the\ncourse be included in a masterdegree which is based on a bachelordegree in which the\ncourse DIT270 is included.\n\nThe course is a joint course together with Chalmers.\n\nCourse literature to be announced 8 weeks prior to the start of the course."
  }
}