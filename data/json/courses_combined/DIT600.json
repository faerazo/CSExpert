{
  "metadata": {
    "source_document": "DIT600.pdf",
    "course_code": "DIT600",
    "course_title": "Algorithms",
    "swedish_title": "Algorithms",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science-Software Engineering and Tech, Computer Science-Algorithms and Logic",
    "specialization": "A1N, Second cycle, has only first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2015-11-17",
    "valid_from_date": "2016-08-29",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Bachelor's Programme in Mathematics (N1MAT)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2009-09-18 and was\nlast revised on 2015-11-17 by Department of Computer Science and Engineering to be\nvalid from 2016-08-29, autumn semester of 2016.",
    "Position in the educational system": "This course is a compulsory course in the Computer Science Bachelor's programme and\nis offered within the framework of several degree programmes. The course is also a\nsingle subject course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Bachelor's Programme in Mathematics (N1MAT) and 3)\nComputer Science, Bachelor's Programme (N1COS)",
    "Entry requirements": "To be eligible for the course the student should have successfully completed a 7.5 hec\ncourse in Data structures (DIT960 Data Structures or equivalent) and 15 hec in\nprogramming, including a 7.5 hec course in imperative or object oriented programming\n(DIT012 Imperative Programming with Basic Object-orientation, or equivalent).\nIn addition, the student should have successfully completed courses corresponding to\n67.5 hec in the subject of Computer Science or Mathematics including knowledge in\nDiscrete Mathematics (via DIT980 Discrete Mathematics for Computer Scientists or\nequivalent, or the sub-course Introductory Algebra of MMG200 Mathematics I or\nequivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent\nlevel of an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completing the course the student is expected to be able to:\nKnowledge and understanding\n• describe algorithms and their qualities: explain algorithms in writing, so that others\ncan understand how they work, why they are correct and fast, and where they are\nuseful;\n• recognize and formalize non-trivial computational problems that appear in various\nreal-world computer applications and which need to be solved by algorithms;\n• intractability: recognize intractable problems and other classes of problems like P,\nNP, NPC;\n• prove the correctness of algorithms.\nSkills and abilities\n• design: apply the main design techniques for efficient algorithms (for instance\ngreedy, dynamic programming, divide-and-conquer, backtracking, heuristics) to\nproblems which are similar to the textbook examples but new;\n• perform in simple cases the whole development cycle of algorithms: problem\nanalysis, choosing, modifying and combining suitable techniques and data\nstructures, analysis of correctness and complexity, filling in implementation details,\nlooking for possible improvements, etc;\n• perform simple reductions between problems, explain NP completeness, recognize\nvarious computationally hard problems which tend to appear over and over again in\ndifferent applications, cope, at least in principle, with computationally hard\nproblems, using heuristics, refinements of exhaustive search, approximative\nsolutions, etc;\n• implement algorithms properly and evaluate them in theory and experiment.\nJudgement and approach\n• critically assess algorithmic ideas and demonstrate the ability to see through obvious\nand seemingly plausible algorithms that often turn out to be incorrect;\n• explain why the seemingly plausible algorithms are incorrect;\n• analyse: explain why the time efficiency of algorithms is crucial, express the time\ncomplexity in a rigorous and scientifically sound manner, analyze the time\ncomplexity of algorithms' (sum up operations in nested loops, solve standard\nrecurrences, etc.) i.e. perform an objective evaluation of the performance and be able\nto compare it to other algorithms' performance.",
    "Course content": "The course topics are as follows:\n• Introduction. What is an efficient algorithm?\n• Tools for analysis of algorithms. O-notation. Analyzing loops and recursive calls.\nSolving recurrences;\n• Data structures and algorithms. Review of basic data structures;\n• Combining data structures. Merge-and-find;\n• Graph algorithms;\n•\nGreedy algorithms;\n• Divide-and-conquer;\n• Dynamic programming;\n• Backtracking and Implicit search trees. Branch-and-bound;\n• Short introduction to local search and approximation algorithms;\n• Basic complexity theory. Complexity classes P, NP, and NPC, reductions. Examples\nof NP-complete problems. Coping with hard problems;\n• Short introduction to other design techniques: local search, approximation\nalgorithms, randomized algorithms, preprocessing, network flow.",
    "Sub-courses": null,
    "Form of teaching": "The course is given as lectures, combined with tutorial groups for problem solving.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written exam carried out in an examination hall\nand both theoretical and practical programming assignments. The assignments are\nperformed in groups usually consisting of two students.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nThe grade G reflects fulfilment of learning outcomes for simple and highly structured\nproblems, while VG reflects fulfilment of learning outcomes also for complex and\nunstructured problems. For VG the student has to demonstrate the ability to apply all\nthoeries, methods and techniques to the kind of problems discussed in the course.\nThe final grade is based on the result of the written exam.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed. The\nresults of and possible changes to the course will be shared with students who\nparticipated in the evaluation and students who are starting the course.",
    "Additional information": "The course is a joint course together with Chalmers."
  }
}