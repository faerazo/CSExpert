{
  "metadata": {
    "source_document": "DIT229.pdf",
    "course_code": "DIT229",
    "course_title": "Programming Languages",
    "swedish_title": "Programming Languages",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": null,
    "specialization": "G2F, First Cycle, has at least 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2007-10-10",
    "valid_from_date": "2008-01-21",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "No translation available (NDATM)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2007-10-10 and was last revised on 2007-10-10 to be valid from 2008-01-21.",
    "Position in the educational system": "The course is a part of the Computer Science Bachelor's programme and an elective\ncourse at Göteborg University.\n[MSOffice1].\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Computer Science, Bachelor's Programme (N1COS) and 3)\nNo translation available (NDATM)",
    "Entry requirements": "To be eligible for the course\nstudents should have successfully completed the first year at the Computer Science\nBachelor's programme or equivalent.",
    "Learning outcomes": "The aim of the course is to give understanding of how programming languages are\ndesigned, documented, and implemented. The course covers the basic techniques and\ntools needed to write interpreters, and gives a summary introduction to compilation as\nwell. The students who have passed the course should be able to:\n• define the lexical structure of programming languages by using regular expressions,\nexplain the functioning of finite automata, and implement lexical analysers by using\nstandard tools;\n• define the syntax of programming languages by using context-free grammars,\nexplain the principles of LL and LR parsing, and implement parsers by using\nstandard tools;\n• define and implement abstract syntax;\n• master the technique of syntax-directed translation and its efficient implementation\nin their chosen programming language;\n• formulate typing rules and implement type checkers;\n• formulate operational semantic rules and implement interpreters;\n• write simple code generators;\n• be familiar with the basic implementation issues of both imperative and functional\nlanguages;\n• design and implement special-purpose programming languages.",
    "Course content": "The students will learn about grammars when writing the syntax analysis and about type\nsystems when implementing the type checker. When implementing the interpreter and\ncompiler the students will learn about practical implementation concerns as well as the\ntheory of formal semantics. By experimenting with language extensions the students will\nget an insight into good and bad programming language designs. The teaching consists\nof lectures, exercises, and laborations, as well as individual supervision in connection to\nthe laborations.",
    "Sub-courses": null,
    "Form of teaching": "Language of instruction: English",
    "Assessment": "The course is graded by group exercises and written individual exams. A student who\nhas failed a test twice has the right to change examiner, unless weighty argument can be\nadduced. The application should be sent to the department and has to be in writing.",
    "Grades": "The grading scale comprises: Fail, Pass.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire can be used\nto ensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": null
  }
}