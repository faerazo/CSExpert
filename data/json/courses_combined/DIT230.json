{
  "metadata": {
    "source_document": "DIT230.pdf",
    "course_code": "DIT230",
    "course_title": "Programming Languages",
    "swedish_title": "Programming Languages",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science-Secure and Depend Compr Systems, Computer Science-Algorithms and Logic",
    "specialization": "AXX, Second cycle, in-depth level of the course cannot be classified",
    "language_of_instruction": "English",
    "confirmation_date": "2006-11-17",
    "valid_from_date": "2010-01-18",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Software Engineering Master's Programme (N2SOM)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "No translation available (NDATM)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2006-11-17 and was last revised on 2009-10-15 to be valid from 2010-01-18.",
    "Position in the educational system": "The course is a part of the Computer Science Master's programme and a single subject course at the University of Gothenburg.\nThe level for the course in relation to degree requirements is Master's degree, code AlN.\nThe course has course/courses at first cycle level as entry requirements.\nThe course can be part of the following programmes: 1) Computer Science, Master's Programme (N2COS), 2) Software Engineering Master's Programme (N2SOM), 3)\nComputer Science, Bachelor's Programme (N1COS) and 4) No translation available\n(NDATM)",
    "Entry requirements": "To be eligible for the course\nstudents should have successfully completed a Bachelor degree within Computer Science or equivalent.",
    "Learning outcomes": "The aim of the course is to give understanding of how programming languages are designed, documented, and implemented. The course covers the basic techniques and tools needed to write interpreters, and gives a summary introduction to compilation as well.\nAfter completing the course the student is expected to be able to:\n• Define the lexical structure of programming languages by using regular expressions, explain the functioning of finite automata, and implement lexical analyzers by using standard tools;\n• Define the syntax of programming languages by using context-free grammars, explain the principles of LL and LR parsing, and implement parsers by using standard tools;\n• Define and implement abstract syntax\n• Master the technique of syntax-directed translation and its efficient implementation in their chosen programming language;\n• Formulate typing rules and implement type checkers;\n• Implement polymorphic type checking by using unification;\n• Formulate operational semantic rules and implement interpreters for both imperative and functional languages;\n• Write simple code generators;\n• Be familiar with the basic implementation issues of both imperative and functional languages;\n• Design and implement special -purpose programming languages.",
    "Course content": "The teaching consists of lectures, exercises, and laborations, as well as individual supervision in connection to the laborations.",
    "Sub-courses": "",
    "Form of teaching": "Language of instruction: English",
    "Assessment": "The student is evaluated through Lab work and a final written exam.",
    "Grades": "The grading scale comprises: Fail, Pass, Pass with distinction.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between teachers and student representatives. Further, an anonymous questionnaire can be used to ensure written information. The outcome of the evaluations serves to improve the course by indicating which parts could be added, improved, changed or removed.",
    "Additional information": ""
  }
}