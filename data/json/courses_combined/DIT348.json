{
  "metadata": {
    "source_document": "DIT348.pdf",
    "course_code": "DIT348",
    "course_title": "Software Development Methodologies",
    "swedish_title": "Mjukvaruutvecklingsprocesser",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "G1F, First cycle, has less than 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2021-11-15",
    "valid_from_date": "2022-08-29",
    "programmes": [
      "Software Engineering and Management Bachelor's Programme",
      "Computer Science, Bachelor's Programme (N1COS)",
      "Software Engineering and Management Bachelor's Programme (N1SOF)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and Engineering on 2021-11-15 to be valid from 2022-08-29, autumn semester of 2022.",
    "Position in the educational system": "The course is compulsory within the Software Engineering and Management Bachelor's Programme. It is also a single subject course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Bachelor's Programme (N1COS) and 2) Software Engineering and Management Bachelor's Programme (N1SOF)",
    "Entry requirements": "To be eligible for this course, students must have successfully completed a programming project of at least 7.5 higher education credits (for example DIT092 Mini Project: Team Programming).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• describe what a software process is, which purpose it serves, how it can be\ncontinuously improved, and which terminology is used to discuss them\n• describe and discuss the advantages and disadvantages of different lifecycles,\nincluding Waterfall, V-Model, Iterative, Incremental, and their respective\ncombinations\n• explain how a software process can be improved by the use of approaches, methods\nand frameworks presented in the software process improvement literature\nCompetence and skills\n• describe the core elements of a software process and the associated method content,\nincluding activities, tasks, roles, artifacts, etc.\n• discuss a software process and the way in which it can be improved by using\nmethods and frameworks presented in the software process improvement literature\nand apply the correct terminology\n• evaluate a development project, suggest a plan for software process improvement\nbased on the evaluation, and apply the plan\nJudgement and approach\n• reflect upon current practice within the field of software process improvement, i.e.\nunderstand practical concerns and industry-related initiatives within the field of\nsoftware process improvement\n• identify and discuss the strengths and weaknesses of different software process\nimprovement approaches, methods and frameworks",
    "Course content": "The course introduces the students to the role of software processes in the development\nof a successful software project. The course has two general themes: (1) the\nfundamentals of software processes; (2) the objectives and benefits of software process\nimprovement.\nThe first general theme provides an introduction to the fundamentals of software\nprocesses. The course spans traditional as well as agile software development practices.\nKey roles, key technologies, and key activities in software development practices are\ncovered and put into relationship with the different software development processes.\nThe second general theme strikes a balance between providing information about\nsoftware process improvement methods currently used in practice, and insights reached\nby academic research in the field. Developing reliable software on time and within\nbudget is a challenging issue for many organizations. A software process improvement\nfocus offers the organization a better chance for success. In this course, software process\nimprovement methods, models and techniques will be studied with a focus on practice.\nThe entire lifecycle of a software process improvement effort is covered, starting from\nthe elicitation of improvement needs, through definition of an improvement plan, to\nevaluation of an improvement effort.\nDuring the course, models and processes for software process improvement will be\npresented and discussed. Impact of using the models and processes in an organization\nwill be explored from an organizational and managerial point of view. Special emphasis\nwill be given to practical concerns such as changing requirements or requirement\nmanagement, and related issues that challenge the software development process and the\nfinal result, i.e. the software product.",
    "Sub-courses": "1. Take-home examination (Hemtentamen), 4.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\n2. Assignments (Inlämningsuppgifter), 3 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "The teaching consists of lectures, workshops, exercises and examination parts, as well as\nsupervision in connection to the exercises.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written take-home exam and assignments\nnormally carried out in groups of 5-7 students. The assignments part is examined on the\nbasis of solutions to compulsory problems handed in during the course and on the basis\nof individual contribution to the group work.\nStudents are required to complete written self- and peer-assessment forms during the\ncourse which will be part of the assessment of the student's individual contribution to\nthe project.\nRetake examinations of the assignments part consist of written individual assignments.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nIn order to pass the course both the assignments and the take home examination have to\nbe approved. The final grade in the course is decided from the grade of the take home\nexamination.",
    "Course evaluation": "The course is evaluated through a meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "Course literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT347, 7.5 credits. The course cannot be included in a\ndegree which contains DIT347. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT347 is included."
  }
}