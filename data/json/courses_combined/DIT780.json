{
  "metadata": {
    "source_document": "DIT780.pdf",
    "course_code": "DIT780",
    "course_title": "Hardware Description and Verification",
    "swedish_title": "Hardware Description and Verification",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science-Secure and Depend\nCompr Systems",
    "specialization": "A1F, Second cycle, has second-cycle\ncourse/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2009-09-18",
    "valid_from_date": "2007-08-27",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Software Engineering Master's Programme (N2SOM)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "No translation available (NDATM)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2009-09-18 and was\nlast revised on 2006-11-17 to be valid from 2007-08-27.",
    "Position in the educational system": "The course is a part of the Computer Science Master's programme and an elective\ncourse at the University of Gothenburg.\nThe level for the course in relation to degree requirements is Master's degree, code A1F.\nThe course has course/courses at second cycle level as entry requirements.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Software Engineering Master's Programme (N2SOM), 3)\nComputer Science, Bachelor's Programme (N1COS) and 4) No translation available\n(NDATM)",
    "Entry requirements": "To be eligible for the course\nstudents should have successfully completed a first year studies within the subject\nComputer Science or equivalent. The course requires a basic knowledge of digital design\n(logic gates, latches, how they are used to build circuits with or without state, the idea of\na finite state machine). Familiarity with programming in a functional language is\ndesirable, but not essential. Students with a strong background in digital electronics and\nthe hardware description language VHDL will be able to learn sufficient functional\nprogramming in this course, even if they have not seen functional programming before.\nOther students are advised to take an introductory course in functional programming\nbefore taking this course. Similarly, a strong background in functional programming\ncan compensate for a weaker background in digital design. A previous course in logic\n(DIT201) or in program verification (DIT081) is desirable, but not essential.",
    "Learning outcomes": "After completing the course the student is expected to be able to:\n• design and simulate simple circuits in the standard hardware description language\nVHDL using Gaisler's two process method\n• write formal properties of those circuits in the standard property specification\nlanguage PSL, and verify or disprove those properties using a commercial\nverification tool\n• present and apply the underlying theory and algorithms (the use of binary decision\ndiagrams, state transition systems, CTL model checking, the semantics of PSL)\n• design simple circuits by using the Lava system to write circuit generators\n• use both simulation and formal verification to verify properties of those circuits in\nLava\n• briefly describe the underlying verification method (SAT-based induction)\n• concisely explain the advantages and limitations of each of the above two design\nflows\n• place the above methods in the context of current industrial practice in hardware\nverification.",
    "Course content": "The course gives a flavour of some industrially applied methods for description and\nverification of hardware, as well as some of the current research in the area. It exposes\ntwo different hardware description languages, and to associated verification methods,\nboth in theory and in practice.",
    "Sub-courses": "",
    "Form of teaching": "Language of instruction: English",
    "Assessment": "The examination consists of 3 parts: two Labs, two Take-Home Exams, and a written\nexam. The take home exams will each contribute 25% to your final grade, but you must\nalso pass both of them. The written exam will contribute the remaining 50%. You must\nalso pass the labs. Labs may be done in pairs, but Take-Home Exams must be done\nalone. A student who has failed a test twice has the right to change examiner, unless\nweighty argument can be adduced. A written application should be sent to the\nDepartment.",
    "Grades": "The grading scale comprises: Fail, Pass, Pass with distinction.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire can be used\nto ensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The Board of the IT Faculty."
  }
}