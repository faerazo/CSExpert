{
  "metadata": {
    "source_document": "DIT284.pdf",
    "course_code": "DIT284",
    "course_title": "Requirements Engineering",
    "swedish_title": "Kravhantering",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "A1N, Second cycle, has only first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2019-02-08",
    "valid_from_date": "2019-09-02",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Game Design & Technology Master's Programme (N2GDT)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2019-02-08 to be valid from 2019-09-02, autumn semester of 2019.\nField of education: Science 100%\nDepartment: Department of Computer Science and Engineering",
    "Position in the educational system": "The course is compulsory within Software engineering and Management Master's\nProgramme and is offered within several programmes. It is also a single subject course at\nthe University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Applied Data Science Master's Programme (N2ADS), 3)\nGame Design & Technology Master's Programme (N2GDT) and 4) Software\nEngineering and Management Master's Programme (N2SOF)",
    "Entry requirements": "To be eligible for this course the student should have\n•\na bachelor degree in Software Engineering, Computer Science, Information\nTechnology, Information Systems, or equivalent;\n• a successfully completed course in programming (e.g., DIT042 Object-oriented\nProgramming, DIT012 Imperative Programming with Basic Object-orientation,\nDIT143 Functional Programming, or equivalent);\n• a successfully completed project course (or bachelor thesis) in applied software\ndevelopment or software engineering (e.g., DIT212 Object-oriented programming\nproject, or DIT543 Software Engineering Project).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• explain why requirements engineering is a key to successful software engineering\n• describe the challenges involved in requirements engineering\n• explain the importance of identifying stakeholders and their knowledge, context and\ngoals\n• explain the difference between functional and quality requirements\n• describe how to conduct bespoke (in-project/single-customer) requirements\nengineering in terms of common processes and techniques\n• explain how market-driven differs from bespoke (in-project/single-customer)\nrequirements engineering\n• describe how requirements engineering in agile projects differ from traditional\nrequirements engineering\nCompetence and skills\n• skilfully elicit software requirements\n• clearly document software requirements according to industry standards and state-\nof-the-art\n• prioritise requirements\n• assure the quality of requirements and requirements specifications\n• assess current requirements engineering practices in a software project or a software\ndevelopment company\nJudgement and approach\n• suggest and motivate relevant improvements on requirements engineering processes\n• discuss trade-offs in choosing between different requirements engineering methods\nand processes given a certain project context",
    "Course content": "One of the main challenges in software development is to make sure one is developing\nthe right system, i.e. to understand the requirements that need to be fulfilled. The focus\nof this course is how to find and collect requirements from relevant sources, both at the\nstart and during a software development project. Different methods for this as well as\ndifferent underlying principles and formats for documenting and maintaining\nrequirements are covered.\nIn particular the course covers the problems that arise when requirements engineering is\nconducted in a fast-paced, cost-sensitive industrial reality. The following topics are\nincluded in the course:\n• Stakeholder Identification and Management\n• Requirements Elicitation\n• Writing Requirements and Requirements Specifications\n• Quality Assurance of Requirements\n• Prioritising Requirements\n• Connections and Alignment between Requirements Engineering and other Software\nEngineering activities\n• Requirements Engineering in In-Project vs. Market-driven Development\n• Requirements Engineering in Agile and Iterative/Incremental Development\"",
    "Sub-courses": "1. Take-home examination (Hemtentamen), 4 credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Project (assignments and workshops) (Projekt), 3.5 credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)",
    "Form of teaching": "The course is organised as a series of lectures, workshops as well as project assignments.\nLanguage of instruction: English",
    "Assessment": "The student is examined by individual active participation in all workshops, the\ncompletion of a group project and a written individual take-home exam.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nA Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses.\nA Pass with Distinction grade (VG) for the entire course requires in addition a Pass with\nDistinction (VG) on one of the two sub-courses.",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT276, 7.5 credits. The course cannot be included in a\ndegree which contains DIT276. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT276 is included."
  }
}