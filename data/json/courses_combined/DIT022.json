{
  "metadata": {
    "source_document": "DIT022.pdf",
    "course_code": "DIT022",
    "course_title": "Mathematical Foundations for Software Engineering",
    "swedish_title": "Grundläggande matematik för mjukvarutekniker",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "GIN, First Cycle, has only upper-\nsecondary level entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2017-06-09",
    "valid_from_date": "2017-08-28",
    "programmes": [
      "Software Engineering and Management Bachelor's Programme (N1SOF)",
      "Software Engineering and Management, Bachelor's Programme (N1SEM)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2017-06-09 to be valid from 2017-08-28, autumn semester of 2017.",
    "Position in the educational system": "The course is a compulsory course in the Software Engineering and Management\nBachelor's Programme.\n\nThe course can be part of the following programmes: 1) Software Engineering and\nManagement Bachelor's Programme (N1SOF) and 2) Software Engineering and\nManagement, Bachelor's Programme (N1SEM)",
    "Entry requirements": "General entrance requirements for university studies and the Swedish upper secondary\ncourses English B, Mathematics C, Civics A or English 6, Mathematics 3b/3c, Civics\n1b/la1-1a2 or equivalent.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• describe the problem-solving process,\n• identify and demonstrate various problem-solving techniques,\n• explain the role of basic proof techniques to logically reason about phenomena, for\nexample inductive proofs to show properties of algorithms,\n\nSkills and abilities\n• apply problem-solving techniques in solving programming problems,\n• select and apply mathematical methods for solving problems in the area of software\nengineering or its application domain,\n\nJudgement and approach\n• recommend emerging problem solving techniques applied to programming activities,\n• assess decisions made to achieve programming objectives, and\n• determine when to apply which mathematical concept to problems in the area of\nsoftware engineering or its application domain.",
    "Course content": "The course introduces the students to basic mathematical and critical thinking skills\nneeded for modeling, analysis and design, implementation, and testing of software\napplications. The course has two general themes: (1) the role of problem solving\ntechniques in programming activities; (2) the role of mathematics in addressing\nproblems associated with software engineering.\n\nThe course provides students with general ability to solve engineering problems.\nStudents will be equipped with basic principles, techniques, and heuristics of problem\nsolving such as solving by analogy, means-ends analysis, divide and conquer, building\nblocks, and merging solutions, generalization, and induction.\n\nStudents will then get in touch with mathematical foundations for software engineering\n(e.g. functions, relations, sets, graphs, logic, logarithms, geometry, number theory,\nstatistics, basic proof techniques) that are required in subsequent courses throughout\ntheir studies of software engineering.",
    "Sub-courses": "1. Written exam (Tentamen), 4.5 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n\n2. Assignments (Inlämningsuppgifter), 3 higher education credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "The teaching consists of lectures, group work, excercises, as well as supervision in\nconnection to the excercises.",
    "Assessment": "The course is examined by an individual written exam carried out in an examination hall\nat the end of the course and written assigments normally carried out in groups of 2-3\nstudents. The assignments part is examined on the basis of solutions to compulsory\nproblems handed in during the course and on the basis of individual contribution to the\ngroup work.\n\nStudents are required to complete written self- and peer-assessment forms during the\ncourse.\n\nRetake examinations of the assigments part consist of written individual assigments.\n\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\n\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nTo be awarded Pass (G) for a full course, the students must pass both the exam part and\nthe assignments part with at least grade (G). To be awarded Pass with Distinction (VG)\nfor a full course, the student must, in addition, receive a VG on the written exam part.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "Course litterature to be announced 8 weeks prior to the start of the course."
  }
}