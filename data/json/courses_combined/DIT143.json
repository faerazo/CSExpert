{
  "metadata": {
    "source_document": "DIT143.pdf",
    "course_code": "DIT143",
    "course_title": "Functional Programming",
    "swedish_title": "Funktionell programmering",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "G1F, First Cycle, has less than 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2017-12-19",
    "valid_from_date": "2018-08-19",
    "programmes": [
      "Mathematical Sciences, Master's Programme (N2MAT)",
      "Computer Science, Master's Programme (N2COS)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Bachelor's Programme in Mathematics (N1MAT)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ],
    "iteration": "Autumn 2025",
    "study_pace": "50%",
    "time": "Day",
    "location": "Göteborg",
    "study_form": "Campus",
    "duration": "3 Nov 2025 - 18 Jan 2026",
    "application_period": "17 Mar 2025 - 15 Apr 2025",
    "application_code": "GU-86073"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2017-12-19 and was last revised on 2018-03-26 to be valid from 2018-08-\n19, autumn semester of 2018.",
    "Position in the educational system": "The course is offered within several programmes. It is also a single subject course at the\nUniversity of Gothenburg.\nThe course can be part of the following programmes: 1) Mathematical Sciences,\nMaster's Programme (N2MAT), 2) Computer Science, Master's Programme (N2COS),\n3) Applied Data Science Master's Programme (N2ADS), 4) Bachelor's Programme in\nMathematics (N1MAT) and 5) Software Engineering and Management Master's\nProgramme (N2SOF)",
    "Entry requirements": "To be eligible for this course, students must have successfully completed a 7.5 credits\ncourse in programming in a paradigm other than functional, e.g., DIT948\nProgramming, DIT042 Object-Oriented Programming, MVG300 Programming in\nMatlab, or equivalent.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completion of the course the student is expected to be able to:\nKnowledge and understanding\n• describe the basic concepts of modern functional programming languages, such as:\ndata types, first- and higher-order functions, lazy evaluation, infinite data structures\n• describe a basic repertoire of functional programming techniques, such as:\nrecursion, testing, the role of data types in modelling and problem solving\nCompetence and skills\n• write small to medium-sized functional programs for a variety of applications\n• exploit a variety of programming techniques typical in functional programming,\nsuch as: use of recursion, modelling with recursive datatypes, abstraction and reuse\nwith the help of higher order functions, polymorphism and monads\n• implement effective tests for functional programs with help of suitable tools\nJudgement and approach\n• show the ability, in various contexts, to judge which programming techniques are\nmost appropriate for solving the problem at hand\n• identify the strengths and possible weaknesses of the functional programming\nparadigm, compared to other programming paradigms",
    "Course content": "This course introduces a functional programming language and related concepts to\nstudents that already have some knowledge in programming. The primary goal is to\nmake it possible for students to apply the functional approach to write realistic (small-\nto medium-sized) programs, and transfer general programming skills to the functional\nprogramming domain.\nConcrete topics encountered in the course include:\n• functions as first-class values\n• compound data types (lists, tuples, and user-defined types)\n• recursion and recursive data types\n• using abstraction to avoid repetitive programming\n• algebraic data types\n• polymorphism and type classes\n• time complexity: efficient and inefficient functional programs\n•\npure functions vs input-output\n• modules and abstract data types\n•\ntesting functional programs\n• lazy evaluation and infinite objects\n• monads",
    "Sub-courses": "1. Written examination (Skriftlig tentamen), 4.5 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Laboratory work (Laboration), 3 higher education credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "Teaching is through lectures and self-study exercises, supported by drop-in consultation\ntimes and on-line help.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written exam carried out in an examination hall\nat the end of course, and a number of compulsory assignments typically carried out in\npairs.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nA Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses.\nTo be awarded Pass with Distinction (VG) for a full course, the student must, in\naddition, receive the grade VG on the sub-course Written examination.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT142, 7.5 credits. The course cannot be included in a\ndegree which contains DIT142. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT142 is included.\nThe course cannot be included in a degree programme where course DIT440\nIntroduction to Functional Programming is included, or any other degree which is\nbased on a degree which includes DIT440.\n\nLast modified 20 February 2025",
    "Selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits.",
    "Tuition": "Full education cost: 17 753 SEK\n\nFirst payment: 17 753 SEK\n\n**No fees** are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.\n\n[More information about tuition fees](https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees)"
  }
}