{
  "metadata": {
    "source_document": "DIT400.pdf",
    "course_code": "DIT400",
    "course_title": "Operating Systems",
    "swedish_title": "Operating Systems",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "G1F, First Cycle, has less than 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2006-11-17",
    "valid_from_date": "2015-08-31",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "No translation available (NDATM)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2006-11-17 and was last revised on 2014-10-23 by Department of Computer Science and Engineering to be valid from 2015-08-31, autumn semester of 2015.",
    "Position in the educational system": "The course is offered within the framework of several degree programmes. The course is also a single subject course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's Programme (N2COS), 2) Computer Science, Bachelor's Programme (N1COS) and 3) No translation available (NDATM)",
    "Entry requirements": "Successfully completed the courses DIT152 Embedded systems programming or equivalent, DIT960 Data structures or equivalent and one of the following programming courses: DIT440 Introduction to Functional Programming, DIT950 Programming, Advanced Course, DIT011 Object-oriented Software Development or equivalent.",
    "Learning outcomes": "After completion of the course the student is expected to be able to:\nKnowledge and understanding\n• Explain the core functionality of modern operating systems.\n• Define key concepts and algorithms in operating system implementations.\n• Define implementation of simple OS components.\nSkills and abilities\n•\n• Demonstrate the core functionality of modern operating systems.\n• Write programs that interface to the operating system at the system-call level.\nImplement a piece of system-level code\n• Demonstrate some programming using multithread synchronization constructs (example environment languages: C++, Java)\nJudgement and approach\n• Compare and evaluate scientific papers in the area of operating systems.",
    "Course content": "The course provides an introduction to the design and implementation of operating systems. Topics covered include: concurrent processes, resource management, deadlocks, memory management techniques, virtual memory, processor scheduling, disk scheduling, file systems, distributed file systems, micro kernels, multiprocessor operating system issues and virtual machines. Examples, case-studies.",
    "Sub-courses": "1. Written exam ( Written exam), 6 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Lab work (Lab work), 1.5 higher education credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "Lectures, exercises and labs.\nThe labs place emphasis on hands-on experience with operating systems design.\nStudents practice by using and constructing essential modules in operating systems, such as multiprogramming, memory management, implementation of unix-like shell functionality.",
    "Assessment": "The student is evaluated through Lab work and a final individual written exam carried out in an examination hall. The Laboratory work is normally carried out in groups of two students.\nA student who has failed two examinations on the same material has the right to request a change of examiner. Such a request must be submitted to the Department in writing and shall be granted unless there are particular reasons not to do so.\nIn cases where a course has been discontinued or has undergone major changes, students must be guaranteed at least three examination opportunities (including the regular opportunity) based on the previous content of the course for a period of at least one year.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nTo pass the course, grade Pass (G) is needed on the lab and grade Pass (G) is needed on the written exam. To be awarded a Pass with Distinction (VG) the student must pass the lab with grade Pass (G) and receive a Pass with Distinction (VG) on the written exam.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between teachers and student representatives. Further, an anonymous questionnaire is used to ensure written information. The outcome of the evaluations serves to improve the course by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nKnowledge of basic probability theory can be an advantage."
  }
}