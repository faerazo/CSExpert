{
  "metadata": {
    "source_document": "DIT602.pdf",
    "course_code": "DIT602",
    "course_title": "Algorithms",
    "swedish_title": "Algoritmer",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "AXX, Second cycle, in-depth level of the\ncourse cannot be classified",
    "language_of_instruction": "English",
    "confirmation_date": "2017-02-10",
    "valid_from_date": "2018-08-20",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Mathematical Sciences, Master's Programme (N2MAT)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "Bachelor's Programme in Mathematics (N1MAT)"
    ],
    "content_type": "course"
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2017-02-10 and was last revised on 2018-03-26 to be valid from 2018-08-\n20, autumn semester of 2018.",
    "Position in the educational system": "The course is offered within the framework of several degree programmes. The course is\nalso a single subject course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Mathematical Sciences, Master's Programme (N2MAT), 3)\nApplied Data Science Master's Programme (N2ADS), 4) Computer Science, Bachelor's\nProgramme (N1COS) and 5) Bachelor's Programme in Mathematics (N1MAT)",
    "Entry requirements": "The requirement for the course is to have successfully completed coursers corresponding\nto 120 hp in the subject Computer Science or Mathematics including:\n• 7.5 hec in discrete mathematics (DIT980 Discrete Mathematics for Computer\nScientists, or the sub-course Introductory Algebra of MMG200 Mathematics I, or\nequivalent),\n• additionally 15 hec in mathematics,\n• 7.5 hec in imperative or object oriented programming (DIT012 Imperative\nProgramming with Basic Object-orientation, or equivalent),\n• additionally 7.5 hec in programming,\n• 7.5 hec in data structures (DIT960 Data Structures, or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• describe algorithms and their qualities: explain algorithms in writing, so that others\ncan understand how they work, why they are correct and fast, and where they are\nuseful;\n• recognize and formalize non-trivial computational problems that appear in various\nreal-world computer applications and which need to be solved by algorithms;\n• intractability: recognize intractable problems and other classes of problems like\nP,NP, NPC;\n• explain why the time efficiency of algorithms is crucial, express the time complexity\nin a rigorous and scientifically sound manner;\nCompetence and skills\n•\n•\n• design: apply the main design techniques for efficient algorithms (for instance\ngreedy, dynamic programming, divide-and-conquer, backtracking, heuristics) to\nproblems which are similar to the textbook examples but new;\n• perform in simple cases the whole development cycle of algorithms: problem\nanalysis, choosing, modifying and combining suitable techniques and data\nstructures, analysis of correctness and complexity, filling in implementation\ndetails, looking for possible improvements, etc;\nperform simple reductions between problems, explain NP completeness, recognize\nvarious computationally hard problems which tend to appear over and over again in\ndifferent applications, cope, at least in principle, with computationally hard\nproblems, using heuristics, refinements of exhaustive search, approximative\nsolutions, etc;\nimplement algorithms properly and evaluate them in theory and experiment;\n• prove the correctness of algorithms;\nJudgement and approach\n• critically assess algorithmic ideas and demonstrate the ability to see through obvious\nand seemingly plausible algorithms that often turn out to be incorrect; explain why\nthe seemingly plausible algorithms are incorrect;\n• analyze the time complexity of algorithms' (sum up operations in nested loops, solve\nstandard recurrences, etc.) i.e. perform an objective evaluation of the performance\nand be able to compare it to other algorithms' performance.",
    "Course content": "The course topics are as follows:\n• Introduction. What is an efficient algorithm?\n• Tools for analysis of algorithms. O-notation. Analyzing loops and recursive calls.\nSolving recurrences;\n• Data structures and algorithms. Review of basic data structures;\n• Combining data structures. Merge-and-find;\n• Graph algorithms;\n•\nGreedy algorithms;\n• Divide-and-conquer;\n• Dynamic programming;\n• Backtracking and Implicit search trees. Branch-and-bound;\n• Short introduction to local search and approximation algorithms;\n• Basic complexity theory. Complexity classes P, NP, and NPC, reductions. Examples\nof NP-complete problems. Coping with hard problems;\n• Short introduction to other design techniques: local search, approximation\nalgorithms, randomized algorithms, preprocessing, network flow.",
    "Sub-courses": null,
    "Form of teaching": "The course is given as lectures, combined with tutorial groups for problem solving\nrelated to the course and and a number of assignments (laboration) intended to develop\nthe skill of analyzing and designing algorithms.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written hall-exam.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nThe course is examined by an individual written hall-exam. The grade U-VG is based on\nthe written exam.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course replaces the DIT600 Algorithms 7,5 hp course. The course cannot be\nincluded in a degree which contains DIT600. Neither can the course be included in a\ndegree which is based on another degree in which the course DIT600 is included.\nThe course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course."
  }
}