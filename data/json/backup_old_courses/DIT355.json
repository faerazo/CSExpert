{
  "metadata": {
    "source_document": "DIT355.pdf",
    "course_code": "DIT355",
    "course_title": "Mini Project: Distributed Systems Development",
    "swedish_title": "Miniprojekt: Distribuerad Systemutveckling",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "G1F, First Cycle, has less than 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2018-01-22",
    "valid_from_date": "2018-08-19",
    "programmes": [
      "Software Engineering and Management Bachelor's Programme (N1SOF)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2018-01-22 to be valid from 2018-08-19, autumn semester of 2018.",
    "Position in the educational system": "The course is compulsory within the Software Engineering and Management Bachelor's\nProgramme.\nThe course can be part of the following programme: 1) Software Engineering and\nManagement Bachelor's Programme (N1SOF)",
    "Entry requirements": "To be eligible for this course, students must have successfully completed the following\ncourses, or equivalent:\n• DIT344 Fundamentals of Software Architecture, 7.5 credits,\n• DIT341 Mobile and Web Development, 7.5 credits,\n• DIT092 Mini Project: Team Programming, 7.5 credits.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• define the role of Software Architecture in distributed systems projects,\n• explain the importance of planning (and follow-up on planning) in a larger software\ndevelopment process,\n• explain the importance of design and structure, as well as testing and integration for\nthe successful implementation of a distributed web/mobile system,\nCompetence and skills\n• work as part of a software development team,\n• take responsibility for a role within a software development team,\n• use a modern programming language to implement (parts of) a distributed software\nsystem,\nJudgement and approach\n• assess the additional challenges presented by the introduction of distribution in a\nsoftware project,\n• identify the challenges of developing web/mobile systems, and\n• identify the challenges of planning and execution of a software development project.",
    "Course content": "In this project course, the students work together in groups. Each group produces a\nsoftware prototype, and relevant project documentation. Each student is assigned a role\nin the project group, where they are expected to be responsible for the tasks associated\nwith the role. Students are encouraged to change roles during the development process\nto build a holistic picture of the developed system. During the project students are\npresented with the opportunity to use and develop their skills in the areas Software\nArchitecture and Web/Mobile development. The project is challenging, and requires the\nstudents to collaborate and organize their work efficiently. There is little external\nsteering in this course: the students are responsible for the overall planning and setting\ntheir own internal deadlines in order to finish the project on time.\nThe students combine their theoretical knowledge about Software Architecture and\nDistributed Web/Mobile Systems. The students take a realistic industrial problem and\nsolve it by creating a software architecture description of a web/mobile system, and by\ndesigning and implementing this system. The system may partly consist of existing\nsystems, after which the implementation problem becomes an integration problem.\nDuring this project, the students are responsible for their own software process: they\nhave to supervise and follow-up on their own processes in order to finish the project.",
    "Sub-courses": "",
    "Form of teaching": "The teaching consists of lectures, weekly group meetings and examination parts, as well\nas supervision in connection to the meetings.",
    "Assessment": "The course is examined through artifact review and oral examination based on the\ncourse learning outcomes. The course is assessed by a demonstrable system, software\narchitecture document, and other project documentation, which form the basis for an\nexamination where questions are asked about the submitted artifacts. Furthermore, in\norder to assure individual grading, each student is required to traceably (i.e. with visible\nsupport that is possible to grade) show and argue for his or her:\n• artifact contributions to the project and subgroup he/she was a member of\n• role in the project group,\n• fulfillment of responsibilities for this role in terms of artifacts and activities,\n• interaction and knowledge transfer activities with others, and how this contributed\nto the project as a whole.\nStudents are required to complete self- and peer-assessment forms during the course.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nFor the final grade Pass (G), students must deliver a working and tested software that\nfulfills the minimum requirements along with the required documentation. To attain the\ngrade, the individual student must have contributed in a reasonable way to the final\nproject results of the team, and must be able to explain the team's work related to the\nsoftware architecture document and other project documentation.\nTo be awarded Pass with Distinction (VG), students must in addition fulfill their role\nwith excellence, manifesting this by choosing suitable tools and/or techniques, and\nsupporting this with good documentation.",
    "Course evaluation": "The course is evaluated through a meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "Course literature to be announced the latest 8 weeks prior to the start of the course.\nIt is also up to the students to identify and address such needs based on their particular\nproject focus."
  }
}