{
  "metadata": {
    "source_document": "DIT233.pdf",
    "course_code": "DIT233",
    "course_title": "Types for Programs and Proofs",
    "swedish_title": "Typer för program och bevis",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "AXX, Second cycle, in-depth level of the course cannot be classified",
    "language_of_instruction": "English",
    "confirmation_date": "2019-02-08",
    "valid_from_date": "2019-09-02",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and Engineering on 2019-02-08 to be valid from 2019-09-02, autumn semester of 2019.",
    "Position in the educational system": "The course is offered within several programmes. It is also a single subject course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's Programme (N2COS) and 2) Computer Science, Bachelor's Programme (N1COS)\nMain field of studies\nComputer Science\nSpecialization\nAXX, Second cycle, in-depth level of the course cannot be classified",
    "Entry requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in computer science or mathematics, or equivalent. Specifically, a successfully completed 7.5 credit course in discrete mathematics (e.g., DIT980 Discrete Mathematics for Computer Scientists, or equivalent) and a successfully completed 7,5 credit course in functional programming (e.g. DIT143 Functional Programming, or equivalent is required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• describe several kinds of type systems, their underlying design principles, and their semantic foundation\n• read and present a research topic in the area\nCompetence and skills\n• program in a dependently typed functional programming language\n• prove theorems in a dependently typed programming language using the propositions-as-types principle\n• use deduction formalisms to present type systems and operational semantics of programming languages\nJudgement and approach\n• critically analyse type systems and prove properties about them",
    "Course content": "The development of powerful type systems is an important aspect of modern programming language design. This course provides an introduction to this area. In particular it introduces the notion of dependent type, a type which can depend on (is indexed by) values of another type, for example, the type of vectors indexed by its length. Dependent types are versatile. Through the Curry-Howard identification of proposition and types virtually any property of a program can be expressed using dependent types. The aim of the course is to give a solid and broad foundation in type systems for programming languages, and also give examples of type-based technologies in computer science.\n• introduction to lambda calculus and simple type theory\n• introduction to operational semantics and type systems\n• dependent type theory\n• the Curry-Howard identification of propositions as types\n• programming in Agda, a proof assistant\n• presentation of advanced topics in type systems",
    "Sub-courses": "",
    "Form of teaching": "Lectures, exercise sessions, supervision.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an oral presentation normally performed in pairs, and by an individual take home examination. In addition, to receive a higher grade than G/Pass the student has to pass an individual oral examination.\nThe take home exam includes both theoretical problems and programming assignments. For the oral presentation, the student can select either a research paper or a chapter in the course book involving applications of type systems not covered in the lectures.\nIf the take-home exam is handed in too late it is failed. An oral examination is used as reexamination.\nIf a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the student shall normally be guaranteed at least three examination occasions (including the ordinary examination) during a period of at least one year from the last time the course was given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nTo pass the course the student needs to pass the oral presentation as well as the take-home exam.\nTo receive a higher grade than G/Pass the student needs to pass an individual oral examination, in addition to the oral presentation and the take-home exam. The final grade is decided from the combined results of the oral presentation, the take-home exam, and the oral exam.",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student representatives. Further, an anonymous questionnaire is used to ensure written information. The outcome of the evaluations serves to improve the course by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "Knowledge of Functional Programming is recommended, e.g., from the course DIT143 Functional Programming, or equivalent.\nThe course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT232 Types for Programs and Proofs, 7.5 hec. The course cannot be included in a degree which contains DIT232. Neither can the course be included in a degree which is based on another degree in which the course DIT232 is included."
  }
}