{
  "metadata": {
    "source_document": "DIT360.pdf",
    "course_code": "DIT360",
    "course_title": "Parallel Computer Organization and Design",
    "swedish_title": "Parallel Computer Organization and Design",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": null,
    "specialization": null,
    "language_of_instruction": "English",
    "confirmation_date": "2006-11-17",
    "valid_from_date": "2015-01-19",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Software Engineering Master's Programme (N2SOM)",
      "No translation available (NDATM)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2006-11-17 and was\nlast revised on 2014-11-13 by Department of Computer Science and Engineering to be\nvalid from 2015-01-19, autumn semester of 2015.",
    "Position in the educational system": "The course is a part of the Computer Science Masters programme and an elective course\nat the University of Gothenburg.\nSecond cycle, the course has course/courses at first cycle level as entry requirements.\n(A1F).\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Software Engineering Master's Programme (N2SOM) and 3)\nNo translation available (NDATM)",
    "Entry requirements": "To be eligible for the course\nstudents should have successfully completed a bachelor degree within Computer Science\nor equivalent. Specifically, the course DIT051, Computer Architecture is required.\n\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completing the course the student is expected to be able to:\n• master the terminology and key concepts in the parallel architecture field in order to\nfollow the research advances in this field;\n• understand the principles behind a parallel computer; especially principles for the\ndesign of the communication substrate to support shared-memory as well as\nmessage passing programming models;\n• understand the principles behind programming models for parallel computer\nsystems; and\n• basic skills in the design of software for parallel computers (e.g. multi-core) and\nespecially the issues involved in designing highly efficient parallel software.",
    "Course content": "The course covers programming models and architectural techniques to implement them\nfor parallel computers. The content is divided into the following parts: 1. The first part\nprovides a taxonomy and an overview of different programming models and\narchitectural paradigms for parallel computers. 2. The second part deals with two\nprevailing programming models: shared memory and message passing. The course\ncovers the key primitives used by these models and how they are integrated in\nmainstream programming languages such as C. 3. The third part deals with the different\nissues involved in designing highly efficient parallel software. Important concepts are\ndecomposition of a sequential program into parallel threads, balancing the load,\ntechniques to reduce communication, and techniques to synchronize threads. Practical\nexperiences will be gained through an assignment and exercises. 4. The fourth part deals\nwith the design principles for small-scale parallel computers under shared memory, e.g.,\ndesign principles for multi-core microprocessors. Important concepts covered are cache\ncoherence and consistency and techniques considered are snoopy-cache protocols, the\ninclusion property, multi-phase protocols. 5. The fifth part deals with scalability of\nparallel computers, i.e., architectural techniques for scaling the number of processors to\na high count. This part deals with message passing protocols and scalable cache\ncoherence protocols. 6. The sixth part deals with interconnection networks, an\nimportant component for scalable parallel computer architectures. Important concepts\ncovered are routing, switching and topologies for scalable interconnection networks. 7.\nThe fifth and final part deals with latency tolerance techniques, i.e., techniques that can\nhide the latency of communication evens such as sending a message from one node to\nanother. Techniques that are treated include multithreading, relaxed memory\nconsistency models, and prefetching.",
    "Sub-courses": null,
    "Form of teaching": "Language of instruction: English",
    "Assessment": "Written exam(6.0 ECTS Credits) and approved assignment(1.5 ECTS Credits) A\nstudent who has failed a test twice has the right to change examiners, if it is possible. A\nwritten application should be sent to the Department.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire can be used\nto ensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course held in English ang organized into lectures, exercises, and two assignments\nthat focus on the design of parallel software and assessment of the impact of\nperformance for architectural techniques."
  }
}