{
  "metadata": {
    "source_document": "DIT331.pdf",
    "course_code": "DIT331",
    "course_title": "Programming paradigms",
    "swedish_title": "Programming paradigms",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": [
      "Computer Science",
      "Software Engineering"
    ],
    "specialization": [
      "G1F, First Cycle, has less than 60 credits in first-cycle course/s as entry requirements",
      "GXX, First cycle, in-depth level of the course cannot be classified"
    ],
    "language_of_instruction": "English",
    "confirmation_date": "2011-10-11",
    "valid_from_date": "2014-01-20",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Software Engineering Master's Programme (N2SOM)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2011-10-11 and was last revised on 2012-11-12 by Department of Computer Science and Engineering to be valid from 2014-01-20.",
    "Position in the educational system": "The course is a part of Computer Science Bachelor's Programme and an elective course\nat the University of Gothenburg. The course is also offered as a programme course in\nthe Computer Science Master's Programme and in the Software Engineering Master's\nProgramme. GXX\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Software Engineering Master's Programme (N2SOM) and 3)\nComputer Science, Bachelor's Programme (N1COS)\nMain field of studies Specialization\nComputer Science G1F, First Cycle, has less than 60 credits in first-cycle course/s as entry requirements\nComputer Science GXX, First cycle, in-depth level of the course cannot be classified\nSoftware Engineering G1F, First Cycle, has less than 60 credits in first-cycle course/s as entry requirements",
    "Entry requirements": "The requirements for the course is to have successfully passed:\n- a course in functional language (such as DIT440 or DIT142)\n- a course in imperative or object languages (such as DIT011, DIT950 or DIT948)\n- a course in data structures (such as DIT960 or DIT725)\nEnglish A level or English proficiency equivalent to IELTS 5.5 no part under 5.0 or\nTOEFL 530 p, TWE score 4.0 is also required.",
    "Learning outcomes": "After completion of the course the student is expected to be able to:\n1. Knowledge and understanding\n- explain and contrast the principles of different paradigms both conceptually and\nin terms of particular language features.\n- show the relationship between mainstram programminglanguages, the features\nthey implement and the paradigms they support.\n2. Skills and abilities\n- write small idiomatic programs in languages that represent different paradigms\n- read programs written idiomatically in a given paradigm, and translate (encode)\nthem into a language that does not support the paradigm directly\n- read non-idiomatic programs (that use an encoding) and re-write them in their\nidiomatic paradigm.\n3. Judgement and approach.\n- evaluate and apply the styles and strategies that characterize different paradigm\nand assess their suitability for solving a given problem.\n- recognize the paradigms at the core of programs, regardless os shallow\nimplementation choices.",
    "Course content": "This course provides an overview of common programming paradigms, including\nimperative, object-oriented, logic, and functional programming, and discusses the\nfundamental concepts underlying the design, definition, and implementation of modern\ncomputer languages. Students get practical experience with languages that exemplify a\nparticular paradigm.\nThe course will contain:\n• an introduction by example to each paradigm;\n• theoretical and practical studies off transformations between paradigms. Examples\nof such transformations include:\n- introduction/removal of jumps/loops\n- introduction/removal of recursion/stack\n- introduction/removal of processes/continuations\n- introduction/removal of explicit search",
    "Sub-courses": null,
    "Form of teaching": "Language of instruction: English",
    "Assessment": "The course is examined by an individual written examination, carried out in an\nexamination hall.\nA student who has failed the same examination twice has the right to request a change\nof examiner. The request is to be in writing and submitted as soon as possible. The\ndepartment is to grant such a request without undue delay.\nIn cases where a course has been discontinued or major changes have been made a\nstudent should be guaranteed at least three examination occasions (including the\nordinary examination occasion) during a time of at least one year from the last time the\ncourse was given.",
    "Grades": "The grading scale comprises: Fail (U), Pass (G), Pass with Distinction (VG).\nPass requires a mark of 40% on the exam, and Pass with Distinction requires a mark of\n70%.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed",
    "Additional information": "The syllabus correspond to the syllabus of the Programming Paradigms course at\nChalmers."
  }
}