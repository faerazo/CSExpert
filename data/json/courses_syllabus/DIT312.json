{
  "metadata": {
    "source_document": "DIT312.pdf",
    "course_code": "DIT312",
    "course_title": "Computability",
    "swedish_title": "Beräkningsbarhet",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "AXX, Second cycle, in-depth level of the course cannot be classified",
    "language_of_instruction": "English",
    "confirmation_date": "2019-02-26",
    "valid_from_date": "2019-09-02",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and Engineering on 2019-02-26 to be valid from 2019-09-02, autumn semester of 2019.",
    "Position in the educational system": "The course is offered within several programmes. It is also a single subject course at the University of Gothenburg.\n\nThe course can be part of the following programmes: 1) Computer Science, Master's Programme (N2COS) and 2) Computer Science, Bachelor's Programme (N1COS)",
    "Entry requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in Computer Science or equivalent. Specifically, the following courses are required, or equivalent:\n- 7.5 credits in discrete mathematics (e.g., DIT980 Discrete Mathematics for Computer Scientists)\n- 7.5 credits in functional programming (e.g., DIT143 Functional Programming or DIT440 Introduction to Functional Programming)\n\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\n\nKnowledge and understanding\n• define the notion of computable function,\n• explain the Church-Turing thesis,\n• explain the relationship between inductively defined sets, primitive recursion, and proofs by structural induction,\n\nCompetence and skills\n• prove that sets are countable or uncountable, for instance by using diagonalisation,\n• encode inductively defined sets in such a way that members of these sets can be used as inputs or outputs for programs in one or more models of computation,\n• implement programs—in particular, interpreters—correctly in one or more models of computation,\n• prove that functions are or are not computable in some models of computation,\n\nJudgement and approach\n• analyse programs belonging to some models of computation, and\n• manipulate and analyse models of computation.",
    "Course content": "This course is about the concept of \"computation\": how it can be modelled, and what its limits are. To avoid unnecessary complexity one often chooses to study computation via simplified, but powerful, models. These models can for instance be simple programming languages (like the -calculus), or idealised computers (like Turing machines). In the course several such models will be studied, both \"imperative\" and \"functional\".\n\nOne or more models will be used to explore the limits of computation: problems that cannot be solved (within the confines of a given model), and programs that can run arbitrary programs (modelled in a certain way).\n\nThe course also includes a discussion of the Church-Turing thesis, a hypothesis which states, roughly, that a function is computable in a certain intuitive sense only if it can be defined within one of several models of computation.",
    "Sub-courses": "1. Written examination (Skriftlig tentamen), 4.5 credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Assignments (Inlämningsuppgifter), 3 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "Lectures and exercise sessions.\n\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written examination carried out in an examination hall, and by individual written assignments.\n\nIf a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\n\nIn cases where a course has been discontinued or has undergone major changes, the student shall normally be guaranteed at least three examination occasions (including the ordinary examination) during a period of at least one year from the last time the course was given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nA Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses.\nTo be awarded Pass with Distinction (VG) for a full course, the student must, in addition, receive the grade VG on the sub-course Written examination.",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student representatives. Further, an anonymous questionnaire is used to ensure written information. The outcome of the evaluations serves to improve the course by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\n\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT311 Models of Computation, 7.5 credits. The course cannot be included in a degree which contains DIT311. Neither can the course be included in a degree which is based on another degree in which the course DIT311 is included."
  }
}