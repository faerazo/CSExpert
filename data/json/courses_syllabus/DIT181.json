{
  "metadata": {
    "source_document": "DIT181.pdf",
    "course_code": "DIT181",
    "course_title": "Data Structures and Algorithms",
    "swedish_title": "Datastrukturer och Algoritmer",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "G1F, First cycle, has less than 60 credits in\nfirst-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2017-01-05",
    "valid_from_date": "2022-01-17",
    "programmes": [
      "Mathematical Sciences, Master's Programme (N2MAT)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Bachelor's Programme in Mathematics (N1MAT)",
      "Software Engineering and Management Bachelor's Programme (N1SOF)",
      "Software Engineering and Management, Bachelor's Programme (N1SEM)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2017-01-05 and was last revised on 2020-11-06 to be valid from 2022-01-\n17, spring semester of 2022.",
    "Position in the educational system": "The course is a compulsory course in the N1SOF Software Engineering and\nManagement Bachelor's Programme. The course is also a single subject course at the\nUniversity of Gothenburg.\nThe course can be part of the following programmes: 1) Mathematical Sciences,\nMaster's Programme (N2MAT), 2) Applied Data Science Master's Programme\n(N2ADS), 3) Bachelor's Programme in Mathematics (N1MAT), 4) Software\nEngineering and Management Bachelor's Programme (N1SOF) and 5) Software\nEngineering and Management, Bachelor's Programme (N1SEM)",
    "Entry requirements": "To be eligible for this course, students must have successfully completed 7.5 higher\neducation credits in object oriented programming (for example DIT042 Object-Oriented\nProgramming, 7.5 hec) and successfully completed 7.5 hec on basic mathematical\nconcepts such as sets, functions, relations, graphs, logarithms and proof by induction\n(for example DIT022 Mathematical Foundations for Software Engineering, 7.5 hec).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n•\nexplain basic abstract data types and data structures, including lists, queues, hash\ntables, trees, and graphs\n• explain some of the algorithms used to manipulate and query these data structures\nin an efficient way, and explain why they are correct\nCompetence and skills\n•\napply basic abstract data types and data structures, and algorithms related to these\n• implement and use abstract data types as interfaces, and data structures as classes,\nin an object-oriented programming language\n•\nuse a standard library of data structures and algorithms\n• read, specify, and describe algorithms, at a higher level of abstraction than code\nJudgement and approach\n•\nanalyse the efficiency of basic algorithms and data structures\n• make informed choices between different data structures and algorithms for\ndifferent applications",
    "Course content": "Data structures and algorithms are fundamental building blocks in almost all software\nproducts. Knowledge and skills in data abstraction, data structures, and algorithms are\nimportant in the construction, use, and maintenance of adaptable, reusable, correct, and\nefficient program components.\nThe course gives knowledge and skills in the construction and use of algorithms and\ndata structures, an introduction to various techniques for the analysis of algorithms, and\ninsights in the advantages of using data abstraction in program development.\nThe following topics are covered by the course:\n•\nabstract data types\n• common data structures such as arrays, linked lists, unbalanced and balanced trees,\nheaps, and hash tables\n• how these can be used to implement abstract data types such as stacks, queues,\npriority queues, maps, sets, and graphs\n• standard algorithms for these data structures, including their resource demands\n• searching and sorting algorithms\n• standard libraries for data structures and algorithms\n• asymptotic efficiency and simple complexity analysis of data structures and\nalgorithms",
    "Sub-courses": "1. Written hall examination (Skriftlig salstentamen), 4.5 credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Assignments (Inlämningsuppgifter), 3 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "The teaching consists of lectures, group work, exercises, as well as supervision in\nconnection to the exercises.",
    "Assessment": "The course is examined by an individual written exam carried out in an examination\nhall, and assignments normally carried out in smaller groups.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nA Pass grade (G) for the entire course requires at least a Pass grade for all sub-\ncourses.To be awarded Pass with Distinction (VG) for a full course, the student must, in\naddition, receive a VG on the sub-course written exam.",
    "Course evaluation": "The course is evaluated through a meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "Course literature to be announced 8 weeks prior to the start of the course."
  }
}