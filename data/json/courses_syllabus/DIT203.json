{
  "metadata": {
    "source_document": "DIT203.pdf",
    "course_code": "DIT203",
    "course_title": "Logic in Computer Science",
    "swedish_title": "Matematisk logik för datavetenskap",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Mathematics, Computer Science",
    "specialization": "A1N, Second cycle, has only first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2022-11-17",
    "valid_from_date": "2023-08-28",
    "programmes": [
      "Mathematical Sciences, Master's Programme (N2MAT)",
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "Bachelor's Programme in Mathematics (N1MAT)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2022-11-17 to be valid from 2023-08-28, autumn semester of 2023.",
    "Position in the educational system": "The course is a part of the Computer Science Master's programme and an elective\ncourse at the University of Gothenburg.\n\nThe course can be part of the following programmes: 1) Mathematical Sciences,\nMaster's Programme (N2MAT), 2) Computer Science, Master's Programme (N2COS),\n3) Computer Science, Bachelor's Programme (N1COS) and 4) Bachelor's Programme in\nMathematics (N1MAT)",
    "Entry requirements": "To be eligible for the course, students must have successfully completed courses\ncorresponding to 105 hec within the subject Computer Science or Mathematics,\nincluding 7.5 hec in discrete mathematics (for example DIT980 Discrete Mathematics\nfor Computer Scientists or the sub-course Introductory Algebra of MMG200\nMathematics 1).\n\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completing the course the student is expected to be able to:\n\nKnowledge and understanding\n• explain when a given formula is a tautology\n• explain the notion of model of a first-order language and of temporal logic\n• explain when a first-order and a temporal logic formula is semantically valid\n• explain how to check if a branching-time temporal logic formula is valid in a given\nmodel\n• explain the meaning of the soundness and completeness theorems for propositional\nand predicate calculus\n\nCompetence and skills\n• write and check proofs in natural deduction for propositional and predicate\ncalculus\n• specify properties of a reactive system using linear-time temporal logic and\nbranching-time temporal logic\n\nJudgement and approach\n• judge the relevance of logical reasoning in computer science, i.e. for modelling\ncomputer systems\n• analyse the applicability of logical tools to solve problems in computer science, i.e.\nfinding bugs with the use of model checking",
    "Course content": "Powerful tools for verifying software and hardware systems have been developed. These\ntools rely in a crucial way on logical techniques. This course provides a sound basis in\nlogic and a short introduction to some logical frameworks used in modelling, specifying\nand verifying computer systems. A sound basic knowledge in logic is a welcome\nprerequisite for courses in program verification, formal methods and artificial\nintelligence.\n\nThe course covers propositional and predicate calculus, and model-checking. More\nconcretely, the course gives a thorough introduction to fundamental notions of logic\nsuch as natural deduction, semantics of both propositional and predicate calculus,\nsoundness and completeness, conjunctive normal forms, Horn clauses, undecidability\nand expressiveness of predicate logic, plus an introduction to model checking: Linear-time temporal logic (LTL) and Branching-time temporal logic (CTL).",
    "Sub-courses": "1. Written hall examination (Skriftlig salstentamen), 7.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "Form of teaching": "The course consists of lectures, exercise sessions and non-obligatory assignments.\n\nLanguage of instruction: English",
    "Assessment": "The course is examined by an individual written exam taking place in an examination\nhall at the end of the course.\nThere will be non-obligatory individual assignments offered during the course which\ngrant bonus points for the written exam. These bonus points are valid during the whole\nacademic year.\n\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\n\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nThe final grade of the course is based on the result of the written exam.",
    "Course evaluation": "The course is evaluated through meeting during and after the course between teachers\nand student representatives. Further, an anonymous questionnaire is used to ensure\nwritten information. The outcome of the evaluations serves to improve the course by\nindicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\n\nCourse literature will be announced the latest 8 weeks prior to the start of the course.\n\nThe course replaces the course DIT202 Logic in Computer Science, 7.5 credits. The\ncourse cannot be included in a degree which contains DIT202. Neither can the course be\nincluded in a degree which is based on another degree in which the course DIT202 is\nincluded"
  }
}