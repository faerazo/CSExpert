{
  "metadata": {
    "source_document": "DIT185.pdf",
    "course_code": "DIT185",
    "course_title": "Software Analysis and Design",
    "swedish_title": "Mjukvaruanalys och konstruktion",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "G1F, First cycle, has less than 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2021-09-30",
    "valid_from_date": "2022-01-17",
    "programmes": [
      "Computer Science, Bachelor's Programme (N1COS)",
      "Software Engineering and Management Bachelor's Programme (N1SOF)",
      "Software Engineering and Management, Bachelor's Programme (N1SEM)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2021-09-30 to be valid from 2022-01-17, spring semester of 2022.",
    "Position in the educational system": "The course is a compulsory course within the Software Engineering and Management\nBachelor's Programme. The course is also a single subject course at the University of\nGothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Bachelor's\nProgramme (N1COS), 2) Software Engineering and Management Bachelor's\nProgramme (N1SOF) and 3) Software Engineering and Management, Bachelor's\nProgramme (N1SEM)",
    "Entry requirements": "To be eligible for this course, students must have successfully completed 7,5 higher\neducation credits in object oriented programming (for example DIT042 Object-Oriented\nProgramming, 7.5 hec).",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• explain how to represent a software system using UML models,\n• explain guidelines and heuristics for performing a domain analysis,\nCompetence and skills\n• analyze and design software systems using object oriented techniques,\n• create an UML model that is an abstract representation of the source code,\n• use tools for domain and requirements analysis, modeling, program visualization,\nand object oriented program design,\nJudgement and approach\n• analyse how software design principles and patterns impact software quality,\n• reflect on - and resolve inconsistencies between various models used as part of a\nsingle system's design.",
    "Course content": "The purpose of this course is to familiarize students with concepts, methods, and tools\nfor object oriented analysis and design of software systems, with emphasis on methods\napplied in large product development projects. The course introduces common design\nprinciples and patterns that support the development of maintainable, reusable and\nextensible software. The course gives an introduction to UML.\nAnalysis- and design models are expressed using UML models such as use case\ndiagrams, class diagram, sequence diagrams, and state diagrams. Furthermore,\ntechniques and guidelines are introduced for analysis of software domain and\nrequirements.",
    "Sub-courses": "1. Written exam (Tentamen), 4.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\n2. Assignments (Inlämningsuppgifter), 3 credits\nGrading scale: Pass (G) and Fail (U)",
    "Form of teaching": "The teaching consists of lectures, group work, exercises, as well as supervision in\nconnection to the exercises.",
    "Assessment": "The course is examined by an individual written exam carried out in an examination hall\nat the end of course and written assignments normally carried out in groups of 2-3\nstudents. The assignments part is examined on the basis of solutions to compulsory\nproblems handed in during the course and on the basis of individual contribution to the\ngroup work.\nStudents are required to complete written self- and peer-assessment forms during the\ncourse which will be input to the individual contribution.\nRetake examinations of the assignments part consist of written individual assignments.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nIn order to pass the course both the assignments and the written hall examination have\nto be approved. The final grade in the course is decided from the grade of the written\nhall examination.",
    "Course evaluation": "The course is evaluated through a meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "Course literature to be announced 8 weeks prior to the start of the course.\nThe course replaces the course DIT184, 7.5 credits. The course cannot be included in a\ndegree which contains DIT184. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT184 is included."
  }
}