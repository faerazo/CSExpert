{
  "metadata": {
    "source_document": "DIT430.pdf",
    "course_code": "DIT430",
    "course_title": "High Performance Parallel Programming",
    "swedish_title": "Parallell programmering för hög prestanda",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "AXX, Second cycle, in-depth level of the\ncourse cannot be classified",
    "language_of_instruction": "English",
    "confirmation_date": "2019-02-08",
    "valid_from_date": "2019-09-02",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2019-02-08 to be valid from 2019-09-02, autumn semester of 2019.",
    "Position in the educational system": "The course is offered within several programmes. It is also a single subject course at the\nUniversity of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Applied Data Science Master's Programme (N2ADS) and 3)\nSoftware Engineering and Management Master's Programme (N2SOF)",
    "Entry requirements": "To be eligible for the course, students should have successfully completed courses\ncorresponding to 90 credits within the subject of Computer Science, Mathematics,\nSoftware Engineering, or equivalent, including a 7.5 credits course in machine-oriented\nprogramming (e.g., DIT151 Machine Oriented Programming, or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "On successful completion of the course the student will be able to:\nKnowledge and understanding\n• List the different types of parallel computer architectures, programming models and\nparadigms, as well as different schemes for synchronization and communication.\n• List the typical steps to parallelize a sequential algorithm\n• List different methods for analyses methodologies of parallel program systems\nCompetence and skills\n• Apply performance analysis methodologies to determine the bottlenecks in the\nexecution of a parallel program\n• Predict the upper limit to the performance of a parallel program\nJudgement and approach\n• Given a particular software, specify what performance bottlenecks are limiting the\nefficiency of parallel code and select appropriate strategies to overcome these\nbottlenecks given a certain software.\n• Design energy-aware parallelization strategies based on a specific algorithm\nstructure and computing system organization\n• Argue for which performance analysis methods that are important given a specific\ncontext.",
    "Course content": "This course looks at parallel programming models, efficient programming\nmethodologies and performance tools with the objective of developing highly efficient\nparallel programs.\nThe course consists of a set of lectures and laboratory sessions. The lectures start with\nan overview of parallel computer architectures and parallel programming models and\nparadigms. An important part of the discussion are mechanisms for synchronization\nand data exchange. Next, performance analysis of parallel programs is covered. The\ncourse proceeds with a discussion of tools and techniques for developing parallel\nprograms in shared address spaces. This section covers popular programming\nenvironments such as pthreads and OpenMP. Next the course discusses the development\nof parallel programs for distributed address space. The focus in this part is on the\nMessage Passing Interface (MPI). Finally, we discuss programming approaches for\nexecuting applications on accelerators such as GPUs. This part introduces the CUDA\n(Compute Unified Device Architecture) programming environment.\nThe lectures are complemented with a set of laboratory sessions in which participants\nexplore the topics introduced in the lectures. During the lab sessions, participants\nparallelize sample programs over a variety of parallel architectures, and use\nperformance analysis tools to detect and remove bottlenecks in the parallel\nimplementations of the programs.",
    "Sub-courses": "1. Written exam (Tentamen), 4.5 credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)\n2. Laboratory (Laborationer), 3 credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)",
    "Form of teaching": "The teaching consists of theory-oriented lectures and lab sessions in which the\nparticipants develop code for different types of parallel computer systems.",
    "Assessment": "The course is examined by an individual written exam that is carried out in an\nexamination hall and a laboratory report written in groups of two.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nA Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses.\nA Pass with Distinction grade (VG) for the entire course requires a Pass with Distinction\n(VG) on both sub-courses.",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nKnowledge of concurrent programming is recommended, e.g., from the course DIT391\nPrinciples of Concurrent Programming, or equivalent."
  }
}