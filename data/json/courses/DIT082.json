{
  "metadata": {
    "source_document": "DIT082.pdf",
    "course_code": "DIT082",
    "course_title": "Testing, Debugging and Verification",
    "swedish_title": "Testing, Debugging and Verification",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "G2F, First Cycle, has at least 60 credits in\nfirst-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2007-10-23",
    "valid_from_date": "2017-08-20",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Software Engineering Master's Programme (N2SOM)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "No translation available (NDATM)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2007-10-23 and was\nlast revised on 2017-06-07 by Department of Computer Science and Engineering to be\nvalid from 2017-08-20, autumn semester of 2017.",
    "Position in the educational system": "The course Testing, Debugging and Verification, 7.5 higher education credits, is a part\nof the Computer Science Bachelor's programme and an elective course at the University\nof Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Applied Data Science Master's Programme (N2ADS), 3)\nSoftware Engineering Master's Programme (N2SOM), 4) Computer Science, Bachelor's\nProgramme (N1COS) and 5) No translation available (NDATM)",
    "Entry requirements": "To be eligible for the course students should have successfully completed:\n- one year of an education aiming at a bachelor degree within Computer Science or\nequivalent\n- a course in discrete mathematics (such as MMGD10)\n- a course in object oriented programming (such as DIT011 or DIT950)",
    "Learning outcomes": "After completion of the course the student is expected to be able to.\n1. Knowledge and understanding\n• describe the possibilities and limitations of both informal and formal techniques for\nthe discovery, analysis, and resolving of program errors,\n• describe the concept of precise specifications of software units,\n• discuss the principles of verification.\n2. Skills and abilities\n•\nexpress precise specifications of software units,\n• systematically discover inputs on which a program fails,\n• locate, analyse, and fix the error which caused the failure,\n• formally reason about simple programs for guaranteeing correctness\n3. Judgement and approach\n• judge the various error removal and prevention practices they encounter in a work\ncontext,\n• contribute to the development and improvement of error removal and prevention\ntechniques in a given context,\n• follow up on, and take advantage of, conceptual and technical developments in the\narea of testing, debugging, and verification that go beyond the exact techniques\ncovered in the course.",
    "Course content": "The main aim of the course is to provide a basic understanding for techniques that cope\nwith errors in programs. Reoccurring themes are a) the identification of errors, b) their\nanalysis, and c) their removal. The course also provides an understanding of systematic\nways to convince oneself that a program unit really does what it should.\nThe course processing contrasting formal and informal methods, testing (terminology,\ncoverage, unit tests, a unit test framework), debugging (control, workflow, localisation,\ntools), formal specifications (pre-/postconditions, invariants), automatic test case\ngeneration, formal verification (logics, tool support). Throughout, the course is\nconcerned with imperative programs in general, and object-oriented programs in\nparticular.\nAfter the course, students have understood - and are able to employ - the methods\ntesting (trying to reveal the presence of errors in a systematic way), debugging (the act of\nisolating and fixing errors), and verification (reasoning about programs in order to\nguarantee correctness). All these methods only make sense in the presence of a\nspecification of what the program is supposed to do.",
    "Sub-courses": null,
    "Form of teaching": "Language of instruction: English\nThe course is given in English.",
    "Assessment": "The course is examined by a final individual written hall exam, 5.0 hec, and Laboration\n(practical hand-in assignments), 2.5 hec. The laborations are usually done in groups of\n2-3 students.\nIn case a practical hand-in assignment is not passed in the first attempt, the student is\ngranted a second try.\nA student who has failed two examinations on the same material has the right to request\na change of examiner. Such a request must be submitted to the Department in writing\nand shall be granted unless there are particular reasons not to do so.\nIn cases where a course has been discontinued or has undergone major changes, students\nmust be guaranteed at least three examination opportunities (including the regular\nopportunity) based on the previous content of the course for a period of at least one\nyear.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nIn order to get the grade Pass for the full course the student must pass both the Written\nExam and laboration (hand-ins).\nTo be awarded the grade Pass with Distinction the student must get the grade Pass with\nDistinction on the written exam and pass Laboration (hand-ins).",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers."
  }
}