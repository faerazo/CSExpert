{
  "metadata": {
    "source_document": "DIT191.pdf",
    "course_code": "DIT191",
    "course_title": "Agile Development Processes",
    "swedish_title": "Agile Development Processes",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science-Software Engineering and Tech",
    "specialization": "AIN, Second cycle, has only first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2009-09-22",
    "valid_from_date": "2017-08-20",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Software Engineering and Management, Master's Programme (N2SEM)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Game Design & Technology Master's Programme (N2GDT)",
      "Software Engineering Master's Programme (N2SOM)",
      "Computer Science, Bachelor's Programme (N1COS)",
      "No translation available (NDATM)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2009-09-22 and was last revised on 2017-06-07 by Department of Computer Science and Engineering to be valid from 2017-08-20, autumn semester of 2017.",
    "Position in the educational system": "The course is a part of the Computer Science Master's programme and an elective course at the University of Gothenburg. the course is also offered as an elective course in the Software Engineering Master's programme.\nThe level for the course in relation to degree requirements is Master's degree, code AlN.\nThe course has course/courses at first cycle level as entry requirements.\nThe course can be part of the following programmes: 1) Computer Science, Master's Programme (N2COS), 2) Software Engineering and Management, Master's Programme (N2SEM), 3) Applied Data Science Master's Programme (N2ADS), 4) Game Design & Technology Master's Programme (N2GDT), 5) Software Engineering Master's Programme (N2SOM), 6) Computer Science, Bachelor's Programme (N1COS), 7) No translation available (NDATM) and 8) Software Engineering and Management Master's Programme (N2SOF)",
    "Entry requirements": "To be eligible for the course\nstudents should have successfully completed a first year studies within the subject\nComputer Science or equivalent.\n\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completing the course the student is expected to be able to:\n\n1. Knowledge and understanding\n- compare agile and more traditional software development\n- relate lean and agile development\n- contrast different agile methodologies\n- use the agile manifest and its accompanying principles\n- discuss what is different when leading an agile compared to traditional teams\n2. Skills and abilities\n- forming a team organically\n- collaborate in small software development teams\n- interact and show progress continuosly with a customer or user\n- develop programs using small and frequent iterations\n- use test-driven development and test automation\n- refactor a program and a design\n- be member of an Agile team\n- conduct incremental planning using user stories\n3. Judgment and approach\n- explain how software develoopment can be seen as primarily people- and\ncommunication-centric\n- apply the fact that people are the primary drivers of project success\n- describe why no single methodology can fit all projects or contexts\n- discuss how development methodologies need to adapt to varying human cultures and\nchoices.",
    "Course content": "The course teaches how to use agile methods in software development and how to work\nin projects based on the following principles taken from the Manifest for Agile Software\nDevelopment:\n\n- Individuals and interactions, over processes and tools\n\n- Working software, over comprehensive documentation\n- Customer collaboration, -over contract negotiation\n- Responding to change, -over follwing a plan\n\nThe course covers:\n- Management and methods to develop programs incrementally\n- Principles of Agile processes\n- Refactoring (restructuring) of programs and designs\n- Testing and test automation on both unit and system levels\n- Communication- and people-centric software development\n- Agile methods in relation to more traditional, plan-based methods\n- Criticism to agile development methods",
    "Sub-courses": "1. Project (Projekt), 4.5 higher education credits\nGrading scale: Pass (G) and Fail (U)\n2. Examination (Tentamen), 3 higher education credits\nGrading scale: Pass with Distinction (VG), Pass (G) and Fail (U)",
    "Form of teaching": "Language of instruction: English",
    "Assessment": "The course is examined by project (4.5 hec), done in teams, and a individual written hall\nexam (3.0 hec).\n\nA student who has failed the same examination twice has the right to request a change\nof examiner of the department. The request is to be in writing and submitted as soon as\npossible. The department is to grant such a request without undue delay.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nThe complete course grade is decided by the written examination. A student has to pass\nboth the project and the writtemn exam in order to pass the course. To be awarded Pass\nwith Distinction (VG) for a full course the student has to receive the grade VG in the\nexam and the project must be approved.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire can be used\nto ensure written information. The outcome of the evaluations serves to improve the\ncourse by indicating which parts could be added, improved, changed or removed.",
    "Additional information": ""
  }
}