{
  "metadata": {
    "source_document": "DIT843.pdf",
    "course_code": "DIT843",
    "course_title": "Quality Assurance and Testing",
    "swedish_title": "Mjukvarukvalitetsäkring och testning",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Software Engineering",
    "specialization": "A1N, Second cycle, has only first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2020-10-27",
    "valid_from_date": "2021-08-30",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Game Design & Technology Master's Programme (N2GDT)",
      "Software Engineering and Management Master's Programme (N2SOF)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by Department of Computer Science and\nEngineering on 2020-10-27 to be valid from 2021-08-30, autumn semester of 2021.",
    "Position in the educational system": "The course is compulsory within Software Engineering and Management Master's\nProgramme and is also a single subject course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Game Design & Technology Master's Programme (N2GDT)\nand 3) Software Engineering and Management Master's Programme (N2SOF)",
    "Entry requirements": "To be eligible for the course, the student should have a bachelor's degree in Software\nEngineering, Computer Science, Computer Engineering, Information Technology,\nInformation Systems, or equivalent.\nIn addition, the student should have completed courses in:\n• Programming (e.g. DIT042 Object-oriented Programming, DIT012 Imperative\nProgramming with Basic Object-orientation, DIT143 Functional Programming or\nequivalent) and\n• Practical software development or software engineering project (e.g. DIT212 Object-\noriented programming project, or DIT543 Software Engineering Project).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completion of the course, the student is expected to be able to:\nKnowledge and understanding\n• Explain fundamental concepts in software quality (e.g., internal / external quality, as\nwell as quality in use) and quality assurance models\n• Describe how sustainability can be seen as a quality attribute in software products\n• Describe and explain definitions and activities related to software testing, such as\nfaults, failures levels of testing and test automation\n• Explain current research trends within software quality and testing (e.g., test\nflakiness, search-based software testing)\n• Explain the distinction between software verification and software validation\n• Name and describe different testing techniques and approaches, such as mutation\ntesting, automated test prioritisation, test case generation, exploratory testing, etc\n• Explain the concept of continuous integration and relate them to software\ndevelopment processes\nCompetence and skills\n• Define metrics required to monitor and analyse different quality attributes of\nsoftware products\n• Measure quality of software products based on the data from development\nenvironments and tools\n• Explain and implement test activities in connection to different levels of testing (e.g.,\nsystem, integration or unit level tests)\n• Define and implement a test plan or a test scope based on quality goals\n• Design appropriate and meaningful tests\n• Apply automated testing technologies on realistic examples using relevant tools\n(e.g., automated regression testing on continuous integration pipelines)\n• Use automated measurement systems for measuring quality of software products\nbased on the data from the modern development tools\n• Use modern tools for visualisation of trends in software quality\nJudgement and approach\n• Assess the importance of software quality in relation to time and costs in software\ndevelopment projects\n• Assess the quality of sets of tests using software artefacts (e.g., execution logs, test\nscripts, history of test executions)\n• Relate software quality to societal aspects of software development",
    "Course content": "The course addresses the following content:\n• Definitions of software quality assurance, quality attributes, software metrics and\nmodels in quality management, internal quality and external quality;\n• Definitions and differences between software verification and validation\napproaches;\n• Definitions and practical application of software testing techniques and approaches\nrelated to test planning, design, execution and analysis.\nThe course prepares the students to work as quality or test engineers (or managers) in\nsoftware development organizations.",
    "Sub-courses": "1. Report (Rapport), 3 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\nThe sub-course is a report based on statistical analysis to evaluate trade-offs\nbetween different techniques in software quality. The purpose of the sub-course is\nto assess students practical skills taught during the course.\n2. Written exam (Skriftlig salstenta), 4.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\nThe sub-course is an individual, written hall exam with both theoretical and\npractical questions. The purpose of the questions is to assess the students\nknowledge of definitions and relevant research within the field.",
    "Form of teaching": "The course consists of lectures where theory is explained and practical assignments that\nfocus on the use of testing tools and approaches to enable cost-effective testing.\nLanguage of instruction: English",
    "Assessment": "The course is examined by an written report and an individual written examination\ncarried out in an examination hall. The report is graded individually.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and\nFail (U).\nTo pass the course, all mandatory components must be passed. To earn a higher grade\nthan Pass, a higher weighted average from the grades of the components is required.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between\nteachers and student representatives. Further, an anonymous questionnaire is used to\nensure written information.\nThe results of and possible changes to the course will be shared with students who\nparticipated in the evaluation and students who are starting the course.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course.\nThe course replaces the course DIT847, 7.5 credits. The course cannot be included in a\ndegree which contains DIT847. Neither can the course be included in a degree which is\nbased on another degree in which the course DIT847 is included."
  }
}