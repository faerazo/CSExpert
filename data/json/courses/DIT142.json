{
  "metadata": {
    "source_document": "DIT142.pdf",
    "course_code": "DIT142",
    "course_title": "Functional programming",
    "swedish_title": "Funktionell programmering",
    "department": "Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "First Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "G2F, First Cycle, has at least 60 credits in first-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2011-05-20",
    "valid_from_date": "2017-08-20",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Software Engineering and Management, Master's Programme (N2SEM)",
      "Applied Data Science Master's Programme (N2ADS)",
      "Bachelor's Programme in Mathematics (N1MAT)",
      "Software Engineering Master's Programme (N2SOM)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2011-05-20 and was last revised on 2017-06-07 by Department of Computer Science and Engineering to be valid from 2017-08-20, autumn semester of 2017.",
    "Position in the educational system": "The course is an elective course at the University of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS), 2) Software Engineering and Management, Master's Programme\n(N2SEM), 3) Applied Data Science Master's Programme (N2ADS), 4) Bachelor's\nProgramme in Mathematics (N1MAT), 5) Software Engineering Master's Programme\n(N2SOM) and 6) Computer Science, Bachelor's Programme (N1COS)",
    "Entry requirements": "Basic knowledge in descrete mathematics and logic.",
    "Learning outcomes": "1. Knowledge and understanding,\nAfter completion of the course the student is expected to be able to:\n- describe the difference between functional programming and other mainstream programming paradigms,\n- describe the basic elements of the paradigm such as higher-order functions and user- defined data types, and their realisation in the Haskell programming language.\n2. Skills and abilities,\nAfter completion of the course the student is expected to be able to:\n- write small to medium-sized functional programs for a variety of applications;\n- exploit a variety of programming techniques typical in functional programming, such as: use of recursion, modelling with recursive datatypes, abstraction and reuse with the help of higher order functions and monads;\n3. Judgement and approach.\nAfter completion of the course the student is expected to be able to:\n- identify the strengths and possible weaknesses of the functional programming paradigm.",
    "Course content": "In this course the student will learn about functional programming through the Haskell programming language. Concrete topics encountered in the course include:\n- functions as first-class values\n- algebraic and abstract data types\n- polymorphism and classes\n- testing functional programs\n- lazy evaluation and infinite objects\n- monads",
    "Sub-courses": "The course is divided into subcourses:\nExamination 4,5 hp (U-VG)\nLaboratory 3,0 hp (U-G)",
    "Form of teaching": "The course is examined by an individual written exam (U-VG), carried out in an examination hall and compulsory laboratory exercises (U-G). The laboratory exercises are typically carried out in groups.\nLanguage of instruction: English",
    "Assessment": "A student who has failed the same examination twice has the right to request of the department a change of examiner. The request is to be in writing and submitted as soon as possible. the department is to grant such a request without undue delay.\nIn cases where a course has been discontinued or major changes have been made a student should be guaranteed at least three examination occasions (including the ordinary examination occasion) during a time of at least one year from the last time the course was given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nThe grading scale comprises Fail, (U), Pass (G) and Pass with Distinction (VG)\nTo pass the course the student must pass both the laboratory exercises and the written exam. To be awarded Pass with Distinction for a full course, the student must receive a Pass with Distincion on the exam and Pass the laboratory.",
    "Course evaluation": "The course is evaluated through meetings both during and after the course between teachers and student representatives. Further, an anonymous questionnaire is used to ensure written information. The outcome of the evaluations serves to improve the course by indicating which parts could be added, improved, changed or removed.",
    "Additional information": "The course cannot be included in the degree of Computer Science Bachelor's programme which includes DIT440 Introduction to functional programming.\nPrevious programming experience and basic knowledge of data structures are also assumed."
  }
}