{
  "metadata": {
    "source_document": "DIT232.pdf",
    "course_code": "DIT232",
    "course_title": "Types for Programs and Proofs",
    "swedish_title": "Typer för program och bevis",
    "department": "Department of Computer Science and Engineering",
    "field_of_education": "Science 100%",
    "credits": "7.5",
    "cycle": "Second Cycle",
    "main_field_of_study": "Computer Science",
    "specialization": "A1F, Second cycle, has second-cycle course/s as entry requirements",
    "language_of_instruction": "English",
    "confirmation_date": "2008-12-10",
    "valid_from_date": "2018-08-19",
    "programmes": [
      "Computer Science, Master's Programme (N2COS)",
      "Computer Science, Bachelor's Programme (N1COS)"
    ]
  },
  "sections": {
    "Confirmation": "This course syllabus was confirmed by The IT Faculty Board on 2008-12-10 and was\nlast revised on 2017-12-19 by Department of Computer Science and Engineering to be\nvalid from 2018-08-19, autumn semester of 2018.",
    "Position in the educational system": "The course is offered within several programmes. It is also a single subject course at the\nUniversity of Gothenburg.\nThe course can be part of the following programmes: 1) Computer Science, Master's\nProgramme (N2COS) and 2) Computer Science, Bachelor's Programme (N1COS)",
    "Entry requirements": "To be eligible to the course, the student should have successfully completed 120 credits\nof studies in Computer Science or equivalent. Specifically, a completed 7.5 credit course\nin logic (e.g., DIT201 Logic in Computer Science, or equivalent) and a completed 7.5\ncredit course in functional programming (e.g., DIT142 Functional Programming, or\nequivalent) are required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "Learning outcomes": "After completion of the course the student should be able to:\nKnowledge and understanding\n• describe several kinds of type systems, their underlying design principles, and their\nsemantic foundation\n• read and present a research topic in the area\nCompetence and skills\n•\n•\n•\nprogram in a dependently typed functional programming language\nprove theorems in a dependently typed programming language using the\npropositions-as-types principle\nuse deduction formalisms to present type systems and operational semantics of\nprogramming languages\nJudgement and approach\n• critically analyse type systems and prove properties about them",
    "Course content": "The development of powerful type systems is an important aspect of modern\nprogramming language design. This course provides an introduction to this area. In\nparticular it introduces the notion of dependent type, a type which can depend on (is\nindexed by) values of another type, for example, the type of vectors indexed by its\nlength. Dependent types are versatile. Through the Curry-Howard identification of\nproposition and types virtually any property of a program can be expressed using\ndependent types. The aim of the course is to give a solid and broad foundation in type\nsystems for programming languages, and also give examples of type-based technologies\nin computer science.\n•\n• introduction to operational semantics and type systems\ndependent type theory\n• the Curry-Howard identification of propositions as types\n• programming in Agda, a proof assistant\n• presentation of advanced topics in type systems",
    "Sub-courses": "",
    "Form of teaching": "Lectures, exercise sessions, supervision.",
    "Assessment": "The course is examined by an oral presentation normally performed in pairs, and by an\nindividual take home examination. In addition, to receive a higher grade than G/Pass\nthe student has to pass an individual oral examination. Oral examination can also be\nused as reexamination.\nThe take home exam includes both theoretical problems and programming assignments.\nFor the oral presentation, the student can select either a research paper or a chapter in\nthe course book involving applications of type systems not covered in the lectures.\nIf the take-home exam is handed in too late it is failed. An oral examination can be used\nas reexamination.\nIf a student, who has failed the same examined component twice, wishes to change\nexaminer before the next examination, a written application shall be sent to the\ndepartment responsible for the course and shall be granted unless there are special\nreasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\nIn cases where a course has been discontinued or has undergone major changes, the\nstudent shall normally be guaranteed at least three examination occasions (including the\nordinary examination) during a period of at least one year from the last time the course\nwas given.",
    "Grades": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nTo pass the course the student needs to pass the oral presentation as well as the take-\nhome exam.\nTo receive a higher grade than G/Pass the student needs to pass an individual oral\nexamination, in addition to the oral presentation and the take-home exam. The final\ngrade is decided from the combined results of the oral presentation, the take-home\nexam, and the oral exam.",
    "Course evaluation": "The course is evaluated through meeting after the course between teachers and student\nrepresentatives. Further, an anonymous questionnaire is used to ensure written\ninformation. The outcome of the evaluations serves to improve the course by indicating\nwhich parts could be added, improved, changed or removed.",
    "Additional information": "The course is a joint course together with Chalmers.\nCourse literature to be announced the latest 8 weeks prior to the start of the course."
  }
}