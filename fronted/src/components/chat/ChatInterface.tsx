
import React, { useState, useRef, useEffect } from 'react';
import { ChatMessage, Message } from './ChatMessage';
import { ChatInput } from './ChatInput';

export const ChatInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Hello! I am CSExpert. I can help you with your questions about courses and programs in the Department of Computer Science and Engineering at the University of Gothenburg.',
      sender: 'ai',
      timestamp: new Date(),
    }
  ]);
  const [isProcessing, setIsProcessing] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Scroll to the bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  const handleSendMessage = (content: string) => {
    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user',
      timestamp: new Date(),
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setIsProcessing(true);
    
    // Simulate AI response (would be replaced with actual API call)
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: 'This is a simulated response. In a real implementation, this would be generated by the RAG system based on your uploaded documents.',
        sender: 'ai',
        timestamp: new Date(),
        citations: [
          {
            id: 'doc1',
            title: 'Sample Document',
            page: 5,
          }
        ]
      };
      
      setMessages((prev) => [...prev, aiMessage]);
      setIsProcessing(false);
    }, 1500);
  };
  
  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="p-4 border-b border-brand-medium">
        <h1 className="text-xl font-bold text-brand-primary">Chat</h1>
      </div>
      
      {/* Messages area */}
      <div className="flex-1 p-4 space-y-4 overflow-y-auto bg-gray-50">
        {messages.map((message) => (
          <ChatMessage
            key={message.id}
            message={message}
            onCitationClick={(citation) => {
              console.log('Citation clicked:', citation);
              // This would open the document viewer in the real implementation
            }}
          />
        ))}
        
        {/* Show thinking indicator */}
        {isProcessing && (
          <div className="flex items-center space-x-2 p-4 rounded-lg max-w-3xl chat-message-ai">
            <div className="text-sm font-medium">AI Assistant is thinking</div>
            <div className="flex space-x-1">
              <div className="h-2 w-2 rounded-full bg-brand-secondary animate-pulse-light"></div>
              <div className="h-2 w-2 rounded-full bg-brand-secondary animate-pulse-light" style={{ animationDelay: '0.2s' }}></div>
              <div className="h-2 w-2 rounded-full bg-brand-secondary animate-pulse-light" style={{ animationDelay: '0.4s' }}></div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>
      
      {/* Input area */}
      <ChatInput
        onSendMessage={handleSendMessage}
        disabled={isProcessing}
      />
    </div>
  );
};
